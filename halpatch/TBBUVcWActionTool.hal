external procedure RowCalculateTaxMatrix_POVc(var record POVc,Integer,row POVc);
external procedure RowCalculateTaxMatrix_ORVc(var record ORVc,Integer,row ORVc);
external procedure ORDchsum(var record ORVc,Integer);
external function Boolean ORDchrsum(var record ORVc,Integer);
external function string 255 FillupTaxMatrix(Integer,string,string,string,string,string,var record TaxMatrixVc);
external function Boolean POVc_PasteArtCode(var record POVc,Integer,Boolean);
external procedure TBBUVc_ChangeQuantityRecepy(string,val,Integer,var record TBBUVc);
external procedure GetDatePriceBasedOn(string,Date,Date,string,var Date);
external function Boolean GetItemPriceDiscount3(string,val,var record INVc,string,val,val,val,val,val,string,string,string,string,
                                                var val,var string,var val,var string,var val,var string,Integer,var Boolean,Date,Time,
                                                string,Boolean,var Boolean,string,var string,var val,string,string,var string);
external function string 20 GetTax2Acc(string);
external procedure GetTaxesDiscounts(string,Date,string,string,var val,var val);
external function Boolean GetTimeClassPrice(string,string,var val,var val);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function Integer TypeOfCurncy(var string,var Integer);
external function Boolean HasSalesmanChanged(string,string);
external function string 60 AddObjectToObjectList(string,string);
external procedure ExtractObj(string,var Integer,var string);
external function val DivRateToBase1(string,val,val,val,val,val,val,roundmode);
external function val DivWithRateToBase1(string,Date,val,roundmode);
external procedure TBBUDchrsum(var record TBBUVc,Integer,Boolean,Integer);
external procedure TBBUSumup(var record TBBUVc);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external function Boolean OtherExchangeRate(val,val,val,val,val,val,val,val,val,val);
external procedure SaveExchangeRate(val,val,val,val,val,var val,var val,var val,var val,var val);
external function Boolean TBBUVc_ExplodeRecepy(record INVc,val,record TBBUVc,string,Integer);
external function string 255 FindINObjects(string,string);
external function Boolean GetItemNameStr(Integer,var string,string,string,string);
external procedure GetProjectPrice(string,string,string,string,string,val,var val,var val,var string,var val,var string);
external function Boolean GetFirstItem(var string,var record INVc);
external procedure GetItemSalesAcc(string,Integer,var string);
external function Boolean PasteCustInOR(var record ORVc);
external procedure CalcSum(val,val,val,val,var val,Integer);
external procedure GetItemVATCode(string,Integer,var string,Boolean);
external procedure RoundRowSum(string,string,string,var val);
external procedure POSumup(var record POVc);
external function Boolean SetInSet2(string,string); //Edit***************************Sasha2,10:55 14.10.2014
external function Boolean POVc_PasteVECode(var record POVc,Boolean); //Edit***************************Sasha2,13:33 14.10.2014
external function val FindVAT(string,val,Integer,Integer); //Edit***************************Sasha2,10:10 21.10.2014
external procedure CalcTBBUVcCurrencyPriceAndSum(record TBBUVc,var row TBBUVc,val,val,val,Boolean); //Edit***************************Sasha2,17:16 27.02.2015

function Boolean CheckPOPRITHandle(record INVc INp,Integer ItemType,record PRITHandleBlock PRITRecp)
BEGIN
  Boolean res;
  
  if (ItemType==0) then begin
    if (INp.ItemMaterial==0) then begin
      if (PRITRecp.AllowPO!=0) then begin res = true; end;
    end;
  end;  
  if (ItemType==1) then begin
    if ((PRITRecp.StockItem==1) or (PRITRecp.StockItem==3)) then begin res = true; end;
  end;
  if (ItemType==2) then begin
    if (PRITRecp.AllowPO!=0) then begin res = true; end;
  end;  
  CheckPOPRITHandle = res;
  RETURN;
END;

procedure PutOnPORow(var record POVc POp,row POVc POrwp,var Integer porownr,row TBBUVc TBBUrwp,record TBBUVc TBBUp,record INVc INp,string vevatcode,Integer exportflag)
BEGIN
  string 255 tstr;
  val t;
  Integer oldstyle;
  record TaxMatrixVc TMr;
  
  ClearRow(POp,POrwp,1);
  POrwp.ArtCode = TBBUrwp.ArtCode;
  MatRowPut(POp,porownr,POrwp);
  POVc_PasteArtCode(POp,porownr,false);
  MatRowGet(POp,porownr,POrwp);

  POrwp.ArtCode = TBBUrwp.ArtCode;
  POrwp.Spec = TBBUrwp.Comment;
  POrwp.Objects = TBBUrwp.Objects;
  POrwp.PRCode = TBBUp.PRCode;
  POrwp.Quant = TBBUrwp.Qty;
  POrwp.VEQuant = TBBUrwp.Qty;
  if (TBBUrwp.Cost==0) then begin
    if (TypeOfCurncy(TBBUp.CurncyCode,oldstyle)!=1) and (nonblank(TBBUp.CurncyCode)) then begin
      POrwp.Price = MulRateToBase1(TBBUp.CurncyCode,TBBUrwp.Price,TBBUp.FrRate,TBBUp.ToRateB1,TBBUp.ToRateB2,TBBUp.BaseRate1,TBBUp.BaseRate2,DefaultCurRoundOff);
    end else begin
      POrwp.Price = TBBUrwp.Price;
    end;
  end else begin
    POrwp.Price = TBBUrwp.Cost;
  end;
  POrwp.vRebate = blankval;
  POrwp.Sum = TBBUrwp.Sum;
  POrwp.PriceFactor = INp.PriceFactor;
  POrwp.VATCode = vevatcode;
  if (blank(POrwp.VATCode)) then begin
    GetItemVATCode(POrwp.ArtCode,exportflag,tstr,false);
    POrwp.VATCode = tstr;
  end;    
  MatRowPut(POp,porownr,POrwp);
  MatRowGet(POp,porownr,POrwp);
  CalcSum(POrwp.Quant,POrwp.Price,POrwp.PriceFactor,POrwp.vRebate,POrwp.Sum,0);
  RoundRowSum(POp.CurncyCode,POp.PayDeal,"POVc",POrwp.Sum);
  RowCalculateTaxMatrix_POVc(POp,porownr,POrwp);
  MatRowPut(POp,porownr,POrwp);
  porownr = porownr + 1;
  RETURN;
END;

global
procedure PasteTBBUInPO(record TBBUVc TBBUp,var record POVc POp)
BEGIN
  Integer rwcnt,i;
  record CUVc VEr;
  row TBBUVc TBBUrw;
  row POVc POrw;
  Integer porownr;
  record PRITHandleBlock PRITRec;
  record INVc INr;
  val t;
  
  BlockLoad(PRITRec);  
  POp.PRCode = TBBUp.PRCode;
  POp.Comment = TBBUp.Comment;  
  rwcnt = MatRowCnt(TBBUp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(TBBUp,i,TBBUrw);    
    if (blank(VEr.Code)) then begin
      VEr.Code = POp.VECode;
      if (ReadFirstMain(VEr,1,true)) then begin end;
    end;
    INr.Code = TBBUrw.ArtCode;
    if (ReadFirstMain(INr,1,true)) then begin
      if (CheckPOPRITHandle(INr,TBBUrw.ItemType,PRITRec)) then begin
        PutOnPORow(POp,POrw,porownr,TBBUrw,TBBUp,INr,VEr.VEVATCode,POp.ExportFlag);
      end;
    end;
  end;     
  POSumup(POp);    
  RETURN;
END;

function Boolean CheckORPRITHandle(string artcode,Integer ItemType,record PRITHandleBlock PRITRecp)
BEGIN
  Boolean res;
  record INVc INr;
  
  if (ItemType==0) then begin
    INr.Code = artcode;
    if (ReadFirstMain(INr,1,true)) then begin
      if (INr.ItemMaterial==0) then begin
        if (PRITRecp.AllowSO!=0) then begin res = true; end;
      end;
    end;
  end;  
  if (ItemType==1) then begin
    if ((PRITRecp.StockItem==0) or (PRITRecp.StockItem==3)) then begin res = true; end;
  end;
  if (ItemType==2) then begin
    if (PRITRecp.AllowSO!=0) then begin res = true; end;
  end;  
  CheckORPRITHandle = res;
  RETURN;
END;

procedure PutOnORORow(record ORVc ORp,row ORVc ORrwp,row TBBUVc TBBUrwp,string prcode,string CustVATCode,Integer exportflag,var Integer orrownr)
begin
  record INVc INr;
  val t,s,price,vreb,baseprice,temp,tax2prc,tax2reb;
  string 255 curitemname,salesacc,vatcode,tstr,tax2code,location,taxtemplatecode;
  Boolean calcprice;
  Date orddate;
  Boolean dummyf;
  Time blankt;
  record TaxMatrixVc TMr;

  GetDatePriceBasedOn(ORp.CustCode,ORp.OrdDate,ORp.DespatchDate,ORp.PlanShip,orddate);
  if (GetItemPriceDiscount3(TBBUrwp.ArtCode,TBBUrwp.Qty,INr,ORp.CurncyCode,
                            ORp.FrRate,ORp.ToRateB1,ORp.ToRateB2,ORp.BaseRate1,ORp.BaseRate2,
                            ORp.LangCode,ORp.CustCat,ORp.PriceList,ORp.RebCode,
                            price,curitemname,vreb,vatcode,baseprice,salesacc,
                            ORp.ExportFlag,calcprice,orddate,blankt,ORp.CustCode,true,dummyf,ORp.PayDeal,tax2code,tax2prc,ORp.Region,location,taxtemplatecode)) then begin
    ClearRow(ORp,ORrwp,1);
    ORrwp.TaxTemplateCode = FillupTaxMatrix(0,ORp.BranchID,ORp.CustCode,ORp.CustCat,ORp.DelAddrCode,taxtemplatecode,TMr);
    ORrwp.ArtCode = TBBUrwp.ArtCode;
    ORrwp.Spec = TBBUrwp.Comment;
    ORrwp.Objects = TBBUrwp.Objects;
    ORrwp.Quant = TBBUrwp.Qty;
    ORrwp.Price = TBBUrwp.Price;
    ORrwp.vRebate = TBBUrwp.Discount;
    ORrwp.Sum = TBBUrwp.Sum;
    ORrwp.VATCode = CustVATCode;
    ORrwp.BasePrice = TBBUrwp.Cost;
    ORrwp.rowGP = TBBUrwp.GP;
    ORrwp.PriceFactor = INr.PriceFactor;
    GetItemSalesAcc(ORrwp.ArtCode,exportflag,tstr);
    ORrwp.SalesAcc = tstr;
    if (blank(ORrwp.VATCode)) then begin
      GetItemVATCode(ORrwp.ArtCode,exportflag,tstr,true);
      ORrwp.VATCode = tstr;
    end;  

    GetTaxesDiscounts(ORp.CustCode,ORp.OrdDate,ORrwp.VATCode,tax2code,t,tax2reb);
    if (ORp.NoTax2==0) then begin
      ORrwp.TAX2Code = tax2code;
      ORrwp.TAX2Prc = tax2prc;
      ORrwp.TAX2Reb = tax2reb;
      ORrwp.TAX2Acc = GetTax2Acc(ORrwp.TAX2Code);
    end;
    if (ORp.NoTax1==0) then begin
      ORrwp.TAX1Reb = t;
    end;
    PackRowFieldMatrix(ORrwp,"TaxMatrix",TMr);
    MatRowPut(ORp,orrownr,ORrwp);
    RowCalculateTaxMatrix_ORVc(ORp,orrownr,ORrwp);
    MatRowPut(ORp,orrownr,ORrwp);
    orrownr = orrownr + 1;
  end;
  return;
end;

global
procedure PasteTBBUInOR(record TBBUVc TBBUp,var record ORVc ORp)
BEGIN
  Integer rwcnt,i;
  row TBBUVc TBBUrw;
  row ORVc ORrw;
  Integer orrownr;
  record PRITHandleBlock PRITRec;
  record PRVc PRr;
  
  BlockLoad(PRITRec);  
  ORp.CustCode = TBBUp.CustCode;
  if (PasteCustInOR(ORp)) then begin end;
  PRr.Code = TBBUp.PRCode;
  ReadFirstMain(PRr,1,true);
  ORp.Objects = AddObjectToObjectList(ORp.Objects,PRr.Objects);                
  ORp.PRCode = TBBUp.PRCode;
  ORp.Comment = TBBUp.Comment;    
  ORp.CurncyCode = TBBUp.CurncyCode;    
  ORp.FrRate = TBBUp.FrRate;    
  ORp.ToRateB1 = TBBUp.ToRateB1;    
  ORp.ToRateB2 = TBBUp.ToRateB2;    
  ORp.BaseRate1 = TBBUp.BaseRate1;    
  ORp.BaseRate2 = TBBUp.BaseRate2;    
  rwcnt = MatRowCnt(TBBUp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(TBBUp,i,TBBUrw);
    if (CheckORPRITHandle(TBBUrw.ArtCode,TBBUrw.ItemType,PRITRec)) then begin
      PutOnORORow(ORp,ORrw,TBBUrw,TBBUp.PRCode,ORp.CustVATCode,ORp.ExportFlag,orrownr);
    end;
  end;     
  RETURN;
END;

procedure TBBUMultiLineText(record TBBUVc TBBUr,record INVc INr,string  langcode,Integer arow)
begin
  row TBBUVc TBBUrw;
  string 255 tstr;
  Integer tcnt;
 
  tcnt = 2;
  while (GetItemNameStr(tcnt,tstr,langcode,INr.Name,INr.Code)) begin      
    ClearRow(TBBUr,TBBUrw,1);
    TBBUrw.Comment = tstr;
    MatRowInsert(TBBUr,arow+tcnt-1,TBBUrw);
    tcnt = tcnt + 1;
  end;
  return;
end;

global
procedure TBBURowAddPrice(record TBBUVc TBBUr,row TBBUVc TBBUrw)
begin
  string 255 tstr,markup,markupincur;
  val price,reb,v,priceincur;

  GetProjectPrice(TBBUr.PRCode,TBBUrw.ArtCode,TBBUrw.EMCode,TBBUrw.TimeClass,"",TBBUrw.Qty,price,reb,markup,priceincur,markupincur);    
  TBBUrw.Discount = reb;
  if (priceincur!=0) then begin //assumption price is zero
    TBBUrw.Price = priceincur;
    TBBUrw.Markup = markupincur;
  end else begin
    if (nonblank(TBBUr.CurncyCode)) then begin  
      if (TBBUr.FrRate==0 and TBBUr.ToRateB1==0 and TBBUr.ToRateB2==0 and TBBUr.BaseRate1==0 and TBBUr.BaseRate2==0) then begin
        TBBUrw.Price = DivWithRateToBase1(TBBUr.CurncyCode,CurrentDate,price,DefaultCurRoundOff);
        if (Mid(markup,len(markup)-1,1)!="%") then begin    
          markup = DivWithRateToBase1(TBBUr.CurncyCode,CurrentDate,StringToVal(markup,M4Val),DefaultCurRoundOff);
        end;
      end else begin
        TBBUrw.Price = DivRateToBase1(TBBUr.CurncyCode,price,TBBUr.FrRate,TBBUr.ToRateB1,TBBUr.ToRateB2,TBBUr.BaseRate1,TBBUr.BaseRate2,DefaultCurRoundOff);
        if (Mid(markup,len(markup)-1,1)!="%") then begin    
          markup = DivRateToBase1(TBBUr.CurncyCode,StringToVal(markup,M4Val),TBBUr.FrRate,TBBUr.ToRateB1,TBBUr.ToRateB2,TBBUr.BaseRate1,TBBUr.BaseRate2,DefaultCurRoundOff);
        end;
      end;
    end else begin
      TBBUrw.Price = price;
    end;
    TBBUrw.Markup = markup;
  end;
  if (TBBUrw.Discount==0) then begin TBBUrw.Discount = blankval; end;
  return;
end;

global
function Boolean TBBUVc_PasteArtCode(var record TBBUVc TBBUr,Integer rownr,var string inmsg)
begin
  Boolean res;
  record CUVc CUr;
  row TBBUVc TBBUrw;
  string 255 tstr,markup,markupincur;
  val price,reb,v,priceincur;
  record INVc INr;
  Time blankt;
  val cost,t,s,vreb,baseprice,temp,tax2prc,tax2reb;
  string 255 curitemname,salesacc,vatcode,tax2code,location,taxtemplatecode;
  Boolean calcprice;
  Boolean pritemf;
  Boolean dummyf,varf2;
  record TaxMatrixVc TMr;
  
  inmsg = "";
  MatRowGet(TBBUr,rownr,TBBUrw);
  if (nonblank(TBBUrw.ArtCode)) then begin
    if (GetFirstItem(TBBUrw.ArtCode,INr)) then begin
      TBBUrw.ArtCode = INr.Code;
      if (nonblank(INr.WarnText1)) then begin
        inmsg = INr.WarnText1;
      end;
      if (INr.ItemType==1) then begin        
        TBBUrw.RowType = TBBUr.BudStocked;
      end;    
      if (INr.ItemType==3) then begin        
        TBBUrw.RowType = TBBUr.BudTime;
      end;    
      if ((INr.ItemType!=1) and (INr.ItemType!=3)) then begin
        if (INr.ItemMaterial!=0) then begin
          TBBUrw.RowType = TBBUr.BudMaterial;
        end else begin
          TBBUrw.RowType = TBBUr.BudOther;
        end;      
      end;
      TBBUrw.ItemType = INr.ItemType;
      if (TBBUrw.ItemType==0) then begin 
        if (INr.ItemMaterial!=0) then begin            
          TBBUrw.ItemType = 5;
        end;
      end;      
      if ((INr.ItemType==2) and (nonblank(INr.Recepy))) then begin
        TBBUrw.Recepy = INr.Recepy;
      end else begin
        TBBUrw.Recepy = "";
      end;    
      if (GetItemNameStr(1,tstr,TBBUr.LangCode,INr.Name,INr.Code)) then begin end;
      TBBUrw.Comment = tstr;
      TBBUrw.Objects = FindINObjects(INr.Objects,INr.Group);
      MatRowPut(TBBUr,rownr,TBBUrw);
      if ((INr.ExplodeRec==0) or (blank(TBBUrw.Recepy))) then begin
        TBBUMultiLineText(TBBUr,INr,TBBUr.LangCode,rownr);
      end;
      if (NonBlank(INr.Notification)) then begin //Edit***************************Sasha2,13:12 10.10.2014 {
      	TBBUrw.Comment2 = INr.Notification;
      end; //Edit***************************Sasha2,13:12 10.10.2014 }       
      res = true;
    end else begin
      res = false;
    end;
    TBBURowAddPrice(TBBUr,TBBUrw);

    CUr.Code = TBBUr.CustCode;		//Add by Victor 09.09.14
    if (ReadFirstMain(CUr,1,true)) then begin 
    	if(nonblank(CUr.VATCode))then begin
      	TBBUrw.VATCode = CUr.VATCode;
      end;
      /*if (GetItemPriceDiscount3(INr.Code,1,INr,CUr.CurncyCode,0,0,0,0,0,CUr.LangCode,CUr.CustCat,CUr.PLCode,CUr.RebCode,price,curitemname,reb,vatcode,cost,salesacc,CUr.ExportFlag,calcprice,CurrentDate,blankt,CUr.Code,true,dummyf,CUr.PayDeal,tax2code,tax2prc,"","",taxtemplatecode)) then begin
        TBBUrw.Cost = cost;
      end; */		//Was commented before my customization. Victor 09.09.14
    end;  
    
    MatRowPut(TBBUr,rownr,TBBUrw);
  end;
  TBBUVc_PasteArtCode = res;
  return;
end;

global
procedure TBBUVc_PasteEMCode(var record TBBUVc TBBUr,Integer rownr)
begin
  row TBBUVc TBBUrw;
  val price,reb,priceincur;
  string 10 markup,markupincur;
      
  MatRowGet(TBBUr,rownr,TBBUrw);
  TBBURowAddPrice(TBBUr,TBBUrw);
  MatRowPut(TBBUr,rownr,TBBUrw);
  return;
end;

global
function Boolean TBBUVc_PasteQty(var record TBBUVc TBBUr,Integer rownr)
begin
  Boolean res;
  record INVc INr;
  row TBBUVc TBBUrw;
  val price,reb,v;
  string 10 markup;
  
  MatRowGet(TBBUr,rownr,TBBUrw);
  if (nonblank(TBBUrw.ArtCode)) then begin
    INr.Code = TBBUrw.ArtCode;
    if (ReadFirstMain(INr,1,true)) then begin
      if (INr.ExplodeRec==0) then begin
        if ((INr.ItemType==2) and (nonblank(INr.Recepy))) then begin
          TBBUrw.Recepy = INr.Recepy;
        end else begin
          TBBUrw.Recepy = "";
        end;
      end;
      if (INr.ExplodeRec!=0) then begin
        if (nonblank(TBBUrw.Recepy)) then begin
          if (TBBUVc_ExplodeRecepy(INr,TBBUrw.Qty,TBBUr,TBBUrw.Recepy,rownr)) then begin end;
          MatRowGet(TBBUr,rownr,TBBUrw);
          TBBUrw.Recepy = "";
        end else begin
          TBBUVc_ChangeQuantityRecepy(TBBUrw.ArtCode,TBBUrw.Qty,rownr,TBBUr);
        end;
      end;
    end;
    TBBURowAddPrice(TBBUr,TBBUrw);
    MatRowPut(TBBUr,rownr,TBBUrw);
    res = true;
  end;
  TBBUVc_PasteQty = res;
  return;
end;
    
global
procedure TBBUGetRate(var record TBBUVc TBBUp)
begin
  val from,to1,to2,base1,base2;
  string 5 crncy;
  Date td;
 
  crncy = TBBUp.CurncyCode;
  td = TBBUp.TransDate;
  if (blankdate(td)) then begin td = CurrentDate; end;
  GetFullCurncyRate(crncy,td,from,to1,to2,base1,base2);
  TBBUp.CurncyCode = crncy;
  TBBUp.FrRate = from;
  TBBUp.ToRateB1 = to1;
  TBBUp.ToRateB2 = to2;
  TBBUp.BaseRate1 = base1;
  TBBUp.BaseRate2 = base2;  
  return;
end;

global
procedure TBBUDUpdatePrices(var record TBBUVc TBBUr,Boolean readf)
begin
  Integer i,rwcnt;
  row TBBUVc TBBUrw;
  record INVc INr;
  val price,reb;
  string 10 markup;
  record GeneralOptionBlock GOb;

  BlockLoad(GOb);
  if (readf) then begin
    if (ReadFirstMain(TBBUr,0,true)) then begin end;  
  end;
  rwcnt = MatRowCnt(TBBUr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(TBBUr,i,TBBUrw);
    if (nonblank(TBBUrw.ArtCode)) then begin
      INr.Code = TBBUrw.ArtCode;
      if (ReadFirstMain(INr,1,true)) then begin
        TBBURowAddPrice(TBBUr,TBBUrw);
        MatRowPut(TBBUr,i,TBBUrw);
        TBBUDchrsum(TBBUr,i,true,GOb.UseDiscount);
      end;
    end;
  end;
  TBBUSumup(TBBUr);
  return;
end;
    
global
procedure TBBUGetRate2(var record TBBUVc TBBUp)	//Edit by Victor 26.02.15
begin
  row TBBUVc TBBUrw; //Edit***************************Sasha2,15:09 27.02.2015
  Integer rwcnt,i; //Edit***************************Sasha2,15:09 27.02.2015
  val from,to1,to2,base1,base2;
  string 5 crncy;
  Date td;
 
  if (NonBlank(TBBUp.ClientCurncyCode)) then begin
    crncy = TBBUp.ClientCurncyCode;
    td = TBBUp.TransDate;
    if (blankdate(td)) then begin td = CurrentDate; end;
    GetFullCurncyRate(crncy,td,from,to1,to2,base1,base2);
    TBBUp.ClientCurncyCode = crncy;
    TBBUp.ClientFrRate = from;
    TBBUp.ClientToRateB1 = to1;
    TBBUp.ClientToRateB2 = to2;
  end else begin //Edit***************************Sasha2,15:08 27.02.2015 {
    TBBUp.ClientFrRate = blankval;
    TBBUp.ClientToRateB1 = blankval;
    TBBUp.ClientToRateB2 = blankval;
    rwcnt = MatRowCnt(TBBUp);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(TBBUp,i,TBBUrw);
      if (TBBUrw.stp==1) then begin
        TBBUrw.ClientPrice = blankval;
        TBBUrw.ClientSum = blankval;
        MatRowPut(TBBUp,i,TBBUrw);
      end;
    end;
  end; //Edit***************************Sasha2,15:08 27.02.2015 }
  
  return;
end;
            
global
procedure TBBUVc_PasteCurncyCode(var record TBBUVc TBBUp,string oldcurncy,Boolean newratef)
begin
  val fr,to1,to2,br1,br2;
  row TBBUVc TBBUrw;
  string 10 crncy;
  record ItemSettingBlock ISr;
  Boolean testf;
  
  testf = true;
  if (testf) then begin
    if (TBBUp.CurncyCode!=oldcurncy) or (newratef) then begin
      BlockLoad(ISr);
      SaveExchangeRate(TBBUp.FrRate,TBBUp.ToRateB1,TBBUp.ToRateB2,TBBUp.BaseRate1,TBBUp.BaseRate2,fr,to1,to2,br1,br2);
      TBBUGetRate(TBBUp);
      if ((OtherExchangeRate(TBBUp.FrRate,TBBUp.ToRateB1,TBBUp.ToRateB2,TBBUp.BaseRate1,TBBUp.BaseRate2,fr,to1,to2,br1,br2)) and (ISr.UpdCurPrWithDate!=0)) then begin 
        TBBUDUpdatePrices(TBBUp,false);
      end;
    end;
  end;
  return;
end;

            
global
procedure TBBUVc_PasteCurncyCode2(var record TBBUVc TBBUp,string oldcurncy,Boolean newratef)	//Edit by Victor 26.02.15
begin
  val fr,to1,to2,br1,br2;
  row TBBUVc TBBUrw;
  string 10 crncy;
  record ItemSettingBlock ISr;
  Boolean testf;
  
  testf = true;
  if (testf) then begin
    if (TBBUp.ClientCurncyCode!=oldcurncy) or (newratef) then begin
      BlockLoad(ISr);
      //SaveExchangeRate(TBBUp.FrRate,TBBUp.ToRateB1,TBBUp.ToRateB2,TBBUp.BaseRate1,TBBUp.BaseRate2,fr,to1,to2,br1,br2);
      TBBUGetRate2(TBBUp);
      //add here update prices and new fields
      //if ((OtherExchangeRate(TBBUp.FrRate,TBBUp.ToRateB1,TBBUp.ToRateB2,TBBUp.BaseRate1,TBBUp.BaseRate2,fr,to1,to2,br1,br2)) and (ISr.UpdCurPrWithDate!=0)) then begin 
      //  TBBUDUpdatePrices(TBBUp,false);
      //end;
    end;
  end;
  return;
end;

global
procedure TBBUVc_PasteSalesMan(var record TBBUVc TBBUp,string oldsalesmen)
begin 
  record UserVc Userr;
  string 255 salesman;
  Integer pos;

  if (HasSalesmanChanged(TBBUp.SalesMan,oldsalesmen)) then begin
    TBBUp.SalesGroup = "";    
    pos = 0;
    ExtractObj(TBBUp.SalesMan,pos,salesman);
    while (nonblank(salesman)) begin
      Userr.Code = salesman;
      if (ReadFirstMain(Userr,1,true)) then begin
        TBBUp.SalesGroup = AddObjectToObjectList(TBBUp.SalesGroup,Userr.SalesGroup);                
      end;
      ExtractObj(TBBUp.SalesMan,pos,salesman);
    end;
  end;
  return;
end;

global
procedure TBBUVc_PastePRCode(var record TBBUVc TBBUr)
begin 
  record CUVc CUr;
  record PRVc PRr;

  PRr.Code = TBBUr.PRCode;
  if (ReadFirstMain(PRr,1,true)) then begin
    TBBUr.PRName = PRr.Name;
    CUr.Code = PRr.CustCode;
    if (ReadFirstMain(CUr,1,true)) then begin
      TBBUr.CustCode = PRr.CustCode;
      TBBUr.CustName = PRr.CustName;
      TBBUr.LangCode = PRr.LangCode;
      TBBUr.PRLeader = PRr.Leader;
      TBBUr.SalesMan = PRr.PrSalesMan;
      TBBUr.SalesGroup = PRr.SalesGroup;
      TBBUr.Members = PRr.Members;
      TBBUr.CurncyCode = PRr.CurncyCode;
      TBBUVc_PasteCurncyCode(TBBUr,"",true);    
    end;
  end;
  return;
end;

global
function Boolean TBBUVc_PasteTimeClass(var record TBBUVc TBBUr,Integer rownr)
begin
  Boolean res;
  row TBBUVc TBBUrw;
  val price,cost;
  string 10 markup;
  record GeneralOptionBlock GOb;
  
  BlockLoad(GOb);
  MatRowGet(TBBUr,rownr,TBBUrw);
  if (nonblank(TBBUrw.TimeClass)) then begin
    price = TBBUrw.Price;
    cost = TBBUrw.Cost;
    if (GetTimeClassPrice(TBBUrw.TimeClass,TBBUrw.ArtCode,price,cost)) then begin
      TBBUrw.Price = price;
      TBBUrw.Cost = cost;
      MatRowPut(TBBUr,rownr,TBBUrw);
      TBBURowAddPrice(TBBUr,TBBUrw);
      MatRowPut(TBBUr,rownr,TBBUrw);
      TBBUDchrsum(TBBUr,rownr,false,GOb.UseDiscount);
    end;
  end;
  TBBUSumup(TBBUr);
  TBBUVc_PasteTimeClass = res;
  return;
end;

global //Edit***************************Sasha2,9:50 14.10.2014 {
updating function LongInt RecordAction_raPasteTBBUInSeparatePO(record TBBUVc TBBUp)
BEGIN
  LongInt res;
  record PRVc PRr;
  vector record POVc vectPOr;
  record PRITHandleBlock PRITRec;
  record CUVc VEr;
  record INVc INr;
  record POVc POr;
  row POVc POrw;
  row TBBUVc TBBUrw;
  integer i,rwcnt,rownr;
  vector Integer porownr;
  string 50 subcontrname;
  string 255 subcontrlist;
  Integer pos;
  
  if (ReadFirstMain(TBBUp,0,true)) then begin end;  
  PRr.Code = TBBUp.PRCode;
  if (ReadFirstMain(PRr,1,true)==false) then begin goto LRecordAction_raPasteTBBUInSeparatePO; end;
  if (PRr.Terminated!=0) then begin goto LRecordAction_raPasteTBBUInSeparatePO; end;
  
  BlockLoad(PRITRec);  
  rwcnt = MatRowCnt(TBBUp);
  for (i=0;i<rwcnt;i=i+1) begin
  	MatRowGet(TBBUp,i,TBBUrw);
  	if (NonBlank(TBBUrw.ArtCode) and TBBUrw.stp==1) then begin
		INr.Code = TBBUrw.ArtCode;
		if (ReadFirstMain(INr,1,true)) then begin
		    if (INr.ItemType==kItemTypePlain or INr.ItemType==kItemTypeStocked/*CheckPOPRITHandle(INr,TBBUrw.ItemType,PRITRec)*/) then begin
			    if (NonBlank(TBBUrw.SubContractor)) then begin
	  				subcontrname = TBBUrw.SubContractor;
			  	end else begin
			  		subcontrname = "nosubcontr";
			  	end;
			  	if (!SetInSet2(subcontrname,subcontrlist)) then begin
			  		RecordNew(POr);
			  		POr.VECode = TBBUrw.SubContractor;
			  		if (subcontrname!="nosubcontr") then begin
			  			POVc_PasteVECode(POr,false);
			  		end;
			  		vectPOr[subcontrname] = POr;
			  		porownr[subcontrname] = 0;
			  		if (blank(subcontrlist)) then begin
			  			subcontrlist = subcontrname;
			  		end else begin
			  			subcontrlist = subcontrlist & "," & subcontrname;
			  		end;
			  	end;
  				POr = vectPOr[subcontrname];
  				rownr = porownr[subcontrname];
		      	PutOnPORow(POr,POrw,rownr,TBBUrw,TBBUp,INr,VEr.VEVATCode,POr.ExportFlag);
		      	porownr[subcontrname] = rownr;
		      	vectPOr[subcontrname] = POr;
		    end;
	    end;
	end;
  end;
  
  pos = 0; 
  ExtractObj(subcontrlist,pos,subcontrname);
  while (nonblank(subcontrname)) begin
  
  	  POr = vectPOr[subcontrname];
	  POr.PRCode = TBBUp.PRCode;
	  POr.Comment = TBBUp.Comment; 
	  
	  if (POr.SerNr<=0) then begin
	    POr.SerNr = NextSerNr("POVc",POr.TransDate,-1,false,"");
	  end;  
	  if (POr.SerNr<=0) then begin goto LRecordAction_raPasteTBBUInSeparatePO; end;  
	  if (MatRowCnt(POr)>0) then begin
	    POSumup(POr);
	    if (RecordStore(POr,false)) then begin
	      CreateRecordLink(TBBUp,CurrentCompany,POr,CurrentCompany);  
	      CreateRecordLink(POr,CurrentCompany,TBBUp,CurrentCompany); 
	      if (res==-1) then begin
	      	res = POr.SerNr;
	      end; 
	    end;
	  end;
	
  	ExtractObj(subcontrlist,pos,subcontrname);
  end;
 
  
LRecordAction_raPasteTBBUInSeparatePO:;
  RecordAction_raPasteTBBUInSeparatePO = res;
  RETURN;
END; //Edit***************************Sasha2,9:50 14.10.2014 }

global //Edit***************************Sasha2,9:50 14.10.2014 {
procedure TBBUVc_PasteTypeName_Rebate(record TBBUVc TBBUr,integer rownr,var row TBBUVc TBBUrw)
BEGIN
  row TBBUVc TBBU2rw;
  Integer i,rwcnt,length;
  val rebval,rebsize,vat;
  boolean testf,notfound;
  string 255 tstr;
  string 1 cs;
  record CUVc CUr;
  record VATCodeBlock VATB;
  row VATCodeBlock VATBrw;
	
	if (blank(TBBUrw.TypeName)) then begin
		rebval = BlankVal;
		TBBUrw.SumCost = BlankVal; //Sasha2: rebate VAT value
	end else begin
		rebval = BlankVal;
    	testf = false;
    	length = len(TBBUrw.TypeName);
    	for (i=0;i<length;i=i+1) begin
    		cs = mid(TBBUrw.TypeName,i,1);
		    if (asc(cs)==37) then begin
		      tstr = Left(TBBUrw.TypeName,i);
		      rebsize = EvalToVal(tstr);
		      testf = true;
		      i = length;
		    end;
    	end;
    	
	    if (testf) then begin
	    	rwcnt = MatRowCnt(TBBUr);
  			for (i=(rownr-1);i>=0;i=i-1) begin
  				MatRowGet(TBBUr,i,TBBU2rw);
  				if (TBBU2rw.stp!=9 and (TBBU2rw.stp<17 or TBBU2rw.stp>23)) then begin
  					rebval = rebval + TBBU2rw.Sum;
  					vat = vat + FindVAT(TBBU2rw.VATCode,TBBU2rw.Sum,TBBUr.InclVAT,TBBUr.NoTAXonVAT);
  				end;
  				if (TBBU2rw.stp==18) then begin
  					i = -1;
  				end;
  			end;
  			for (i=(rownr+1);i<rwcnt;i=i+1) begin
  		  		MatRowGet(TBBUr,i,TBBU2rw);
  				if (TBBU2rw.stp!=9 and (TBBU2rw.stp<17 or TBBU2rw.stp>23)) then begin
  					rebval = rebval + TBBU2rw.Sum;
  					vat = vat + FindVAT(TBBU2rw.VATCode,TBBU2rw.Sum,TBBUr.InclVAT,TBBUr.NoTAXonVAT);
  				end;
  				if (TBBU2rw.stp==18) then begin
  					i = rwcnt;
  				end;
	    	end;
	    	rebval = rebval*(rebsize/100);
	    	TBBUrw.SumCost = vat*(rebsize/100); //Sasha2: rebate VAT value
	    end else begin
	    	BlockLoad(VATB);
	    	notfound = true;
	    	rebval = EvalToVal(TBBUrw.TypeName);
	    	CUr.Code = TBBUr.CustCode;
	    	if (ReadFirstMain(CUr,1,true)) then begin
	    		rwcnt = MatRowCnt(VATB);
	    		for (i=0;i<rwcnt;i=i+1) begin
		    		MatRowGet(VATB,i,VATBrw);
		    		if (VATBrw.VATCode==CUr.VATCode) then begin
		    			TBBUrw.SumCost = rebval*(VATBrw.ExVatpr/100); //Sasha2: rebate VAT value
		    			notfound = false;
		    			i = rwcnt;
		    		end;
	    		end;
	    	end;
	    	if (notfound) then begin
	    		TBBUrw.SumCost = BlankVal; //Sasha2: rebate VAT value
	    	end;
		end;
	end;

	TBBUrw.Sum = rebval;
	CalcTBBUVcCurrencyPriceAndSum(TBBUr,TBBUrw,TBBUrw.SumCost,TBBUrw.Sum,TBBUrw.Sum,(TBBUrw.Sum!=0)); //Edit***************************Sasha2,17:19 27.02.2015

  RETURN;
END; 