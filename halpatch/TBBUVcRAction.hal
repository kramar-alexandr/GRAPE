external function Boolean FindTheUser(var record UserVc);
external updating procedure FindAcptRulesAndCreateAcceptanceAlert2(Integer,Integer,string,string,string,val,val,string,string,string,string);
external function Boolean AcceptanceActivityExists(Integer,string,string,string);
external updating procedure CancelApprovalRequestActivities(Integer,string,string,string);
external function Boolean AcceptanceRulesExists(Integer,string);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function Integer SetAcceptanceStatus(Integer,string,val);
external function Integer CheckRates(string,val,val,val,val,val,var string);
external procedure SwapM4Val(var val,var val);
external procedure ConvertToDualBase(var string,date,var val,var val,var val,var val,var val,var val,Boolean);
external procedure TBBUSumup(var record TBBUVc);
external procedure B1ToB2Val(val,val,val,var val);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external procedure GetSalesGroup(string,var string);
external updating function Integer SinglePRDownPayInvoice(var record PRVc);// Edit ************************** Wednesday, 20 August 2014 15:29:35
remote procedure PasteTBBUInVIFunc(record TBBUVc);
external function LongInt CountWorkingDays(Date,Date,string,string); //Edit***************************Sasha2,11:05 12.12.2014
external function LongInt DateDiff(Date,Date); //Edit by Victor 23.12.14
external updating procedure CreateTBBUAct(record TBBUVc);
external updating function Boolean CreateCustomTask(string,string,string,string,string);
external function boolean CheckBudgetForEditing(record TBBUVc);//Edit----------------------Dima  19.11.2015

// Edit Start ---------------------------------------------- Edit Start
	//Friday, 12 September 2014 16:24:32
	
updating procedure UpdatePRBUOkFlag(record TBBUVc TBBUr)
begin
record PRVc PRr;
	
	PRr.Code = TBBUr.PRCode;
	if(readfirstmain(PRr,1,true))then begin
	  if (TBBUr.AcceptanceStatus==kAcceptanceStateApproved) then begin
	    PRr.BUOKFlag = 18;
	  end else begin
	   PRr.BUOKFlag = 0;
	  end;
		recordStore(PRr,true);
	end;
return;
end;


	// Edit End ---------------------------------------------- Edit End
//Edit***************************Sasha2,15:14 16.09.2014 {	
updating procedure UpdatePRBUApproveFlag(record TBBUVc TBBUr)
begin
record PRVc PRr;
	
	PRr.Code = TBBUr.PRCode;
	if(readfirstmain(PRr,1,true))then begin
		PRr.BUApproveFlag = TBBUr.ApproveFlag; 
		recordStore(PRr,true);
	end;
return;
end; //Edit***************************Sasha2,15:14 16.09.2014 }

//Edit***************************Sasha2,14:01 29.07.2015 {	
updating procedure UpdateDaughterTBBUApproveFlags(record TBBUVc TBBUr)
begin
record TBBUVc TBBU2r,oldTBBU2r;
record PRVc PRr;
Boolean TrHs,testf;
	
	TrHs = true;
	PRr.MotherCode = TBBUr.PRCode;
	while (LoopKey("MotherCode",PRr,1,TrHs)) begin
	  testf = true;
	  if (PRr.MotherCode!=TBBUr.PRCode) then begin TrHs = false; testf = false; end;
	  if (testf) then begin
	    TBBU2r.PRCode = PRr.Code;
	    if (!ReadFirstMain(TBBU2r,1,true)) then begin testf = false; end;
	  end;
	  if (testf) then begin
	  	recordCopy(oldTBBU2r,TBBU2r);
	    TBBU2r.ApproveFlag = TBBUr.ApproveFlag;
	    recordupdate(oldTBBU2r,TBBU2r,true);
	    //RECORDSTORE(TBBU2r,true);// Edit ************************** Friday, 4 September 2015 11:39:15
	  end;
	end;

return;
end; //Edit***************************Sasha2,14:01 29.07.2015 }

//Edit***************************Sasha2,14:01 29.07.2015 {	
updating procedure UpdateDaughterTBBUAcceptanceStatus(record TBBUVc TBBUr)
begin
record TBBUVc TBBU2r;
record PRVc PRr;
Boolean TrHs,testf;
	
	TrHs = true;
	PRr.MotherCode = TBBUr.PRCode;
	while (LoopKey("MotherCode",PRr,1,TrHs)) begin
	  testf = true;
	  if (PRr.MotherCode!=TBBUr.PRCode) then begin TrHs = false; testf = false; end;
	  if (testf) then begin
	    TBBU2r.PRCode = PRr.Code;
	    if (!ReadFirstMain(TBBU2r,1,true)) then begin testf = false; end;
	  end;
	  if (testf) then begin
	    TBBU2r.AcceptanceStatus = TBBUr.AcceptanceStatus;
	    RECORDSTORE(TBBU2r,true);
	  end;
	end;

return;
end; //Edit***************************Sasha2,14:01 29.07.2015 }
	
procedure SetTBBUAcceptanceFlag(var record TBBUVc TBBUr,record TBBUVc prevTBBUr,LongInt stat)
begin
  val bc1v;
  Boolean testf;
  
  testf = true;
  switch (stat) begin
    case Rs_update:
    otherwise
      ;
  end;
  if (testf) then begin  
    switch (TBBUr.AcceptanceStatus) begin
      case kAcceptanceStatePending:
      case kAcceptanceStateNotStarted:	//Edit by Victor 26.12.14 //Can we do it?
      case kAcceptanceStateApproved:
      case kAcceptanceStateRejected:
      otherwise
        bc1v = MulRateToBase1(TBBUr.CurncyCode,TBBUr.TotSum,TBBUr.FrRate,TBBUr.ToRateB1,TBBUr.ToRateB2,TBBUr.BaseRate1,TBBUr.BaseRate2,DefaultCurRoundOff);
        TBBUr.AcceptanceStatus = SetAcceptanceStatus(kAcceptanceTBBU,TBBUr.CustCode,bc1v);
    end;
  end;
  return;
end;

global
function LongInt TBBUVcRecordDefaults(var record TBBUVc TBBUr,record TBBUVc TBBU2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  record ProjectBlock PRRec;
  val fr,to1,to2,br1,br2;
  string 255 tstr;
      
  BlockLoad(PRRec);
  TBBUr.SalesMan = CurrentUser;
  GetSalesGroup(TBBUr.SalesMan,tstr);
  TBBUr.SalesGroup = tstr;
  TBBUr.BudMaterial = PRRec.BudMaterial;
  TBBUr.BudStocked = PRRec.BudStocked;
  TBBUr.BudTime = PRRec.BudTime;
  TBBUr.BudOther = PRRec.BudOther;
  tstr = TBBUr.CurncyCode;
  GetFullCurncyRate(tstr,TBBUr.TransDate,fr,to1,to2,br1,br2);
  TBBUr.CurncyCode = tstr;
  TBBUr.FrRate = fr;
  TBBUr.ToRateB1 = to1; 
  TBBUr.ToRateB2 = to2;
  TBBUr.BaseRate1 = br1;
  TBBUr.BaseRate2 = br2;    
  TBBUr.AcceptanceStatus = kAcceptanceStateNotRequired;
  if (AcceptanceRulesExists(kAcceptanceTBBU,TBBUr.CustCode)) then begin
    TBBUr.AcceptanceStatus = kAcceptanceStateNotStarted;
  end;
  TBBUVcRecordDefaults = res; 
  RETURN;
END;

global
function LongInt TBBUVcRecordDuplicate(var record TBBUVc TBBUr,record TBBUVc TBBU2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  record ProjectBlock PRRec;
  Integer rwcnt,i;
  row TBBUVc TBBUrw;
  string 255 tstr;
      
  TBBUr.SalesMan = CurrentUser;
  GetSalesGroup(TBBUr.SalesMan,tstr);
  TBBUr.SalesGroup = tstr;
  rwcnt = MatRowCnt(TBBUr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(TBBUr,i,TBBUrw);
    TBBUrw.Invoiced = -1;
    MatRowPut(TBBUr,i,TBBUrw);
  end;
  TBBUr.AcceptanceStatus = kAcceptanceStateNotRequired;
  if (AcceptanceRulesExists(kAcceptanceTBBU,TBBUr.CustCode)) then begin
    TBBUr.AcceptanceStatus = kAcceptanceStateNotStarted;
  end;
  TBBUVcRecordDuplicate = res; 
  RETURN;
END;

global
function LongInt TBBUVcRecordCheck(var record TBBUVc TBBUr,record TBBUVc TBBU2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res,errcode;
  record INVc INr;
  record PRVc PRr;
  record UserVc Userr;
  record CUVc CUr;
  record SalesGroupVc SalesGroupr;
  row TBBUVc TBBUrw,TBBU2rw; //Edit***************************Sasha2,12:22 19.06.2015
  Integer insertmode,updatemode; 
  Integer i,j,k,rwcnt,orwcnt,indext,typelen; //Edit***************************Sasha2,12:28 19.06.2015
  string 255 tstr;
  record MinRebTBBUVc MRTBBUr; //Edit***************************Sasha2,17:39 07.10.2014

  res = 0;
  indext = 2; //Edit***************************Sasha2,12:28 19.06.2015
  insertmode = 1;//Rs_insert
  updatemode = 2;//Rs_update
  PRr.Code = TBBUr.PRCode;
  if (ReadFirstMain(PRr,1,true)==false) then begin
    RecordCheckError(1232,"",-1,"PRCode");      
    res = -1;
    goto LTBBUVcRecordCheck;
  end;  
  if (PRr.Terminated!=0) then begin
    RecordCheckError(1236,"",-1,"PRCode");      
    res = -1;
    goto LTBBUVcRecordCheck;
  end;
  if (TBBUr.CustCode!=PRr.CustCode) then begin
    RecordCheckError(20172,"",-1,"CustCode");      
    res = -1;
    goto LTBBUVcRecordCheck;
  end;
  if (TBBUr.CurncyCode!=PRr.CurncyCode) then begin
    RecordCheckError(20573,"",-1,"PRCode");      
    res = -1;
    goto LTBBUVcRecordCheck;
  end;
  if (nonblank(TBBUr.PRLeader)) then begin
    Userr.Code = TBBUr.PRLeader;
    if (FindTheUser(Userr)==false) then begin
      RecordCheckError(20170,"",-1,"PRLeader");      
      res = -1;
      goto LTBBUVcRecordCheck;
    end;
  end;
  if (nonblank(TBBUr.SalesMan)) then begin
    Userr.Code = TBBUr.SalesMan;
    if (FindTheUser(Userr)==false) then begin
      RecordCheckError(20170,"",-1,"SalesMan");      
      res = -1;
      goto LTBBUVcRecordCheck;
    end;
  end;
  if (nonblank(TBBUr.SalesGroup)) then begin
    SalesGroupr.SGroupCode = TBBUr.SalesGroup;
    if (ReadFirstMain(SalesGroupr,1,true)==false) then begin
      RecordCheckError(20171,"",-1,"SalesGroup");      
      res = -1;
      goto LTBBUVcRecordCheck;
    end;
  end;
  if (nonblank(TBBUr.CustCode)) then begin
    CUr.Code = TBBUr.CustCode;
    if (ReadFirstMain(CUr,1,true)==false) then begin
      RecordCheckError(1290,"",-1,"CustCode");      
      res = -1;
      goto LTBBUVcRecordCheck;
    end;
  end;
  if (nonblank(TBBUr.CurncyCode)) then begin
    errcode = CheckRates(TBBUr.CurncyCode,TBBUr.FrRate,TBBUr.ToRateB1,TBBUr.ToRateB2,TBBUr.BaseRate1,TBBUr.BaseRate2,tstr);
    if (errcode!=0) then begin
      RecordCheckError(errcode,"",-1,tstr);      
      res = -1; 
      goto LTBBUVcRecordCheck;
    end;      
  end;
  
  if (TBBUr.TransDate != PRr.StartDate) then begin	//Edit by Victor 19.06.15
  	TBBUr.TransDate = PRr.StartDate;
  end;
  
  MRTBBUr.PRClass = PRr.PRClass; //Edit***************************Sasha2,17:44 07.10.2014 {
  MRTBBUr.Scope = PRr.Scope;
  if (ReadFirstMain(MRTBBUr,2,true)) then begin
  	if (MRTBBUr.MinReb>0 and TBBUr.GPTotPercent<MRTBBUr.MinReb) then begin
  		if (!UserCanAction("AllowSaveBudgetWithUnacceptableProfitORSellSum",false)) then begin
  			MessageBox(31021,"");
  			/*RecordCheckError(31021,"",-1,"GPTotPercent");      
      		res = -1; 
      		goto LTBBUVcRecordCheck;*/
  		end;
  	end;
  	if (MRTBBUr.MinSellSum>0 and TBBUr.TotSum<MRTBBUr.MinSellSum) then begin
  		if (!UserCanAction("AllowSaveBudgetWithUnacceptableProfitORSellSum",false)) then begin
  			MessageBox(31023,"");
  			/*RecordCheckError(31023,"",-1,"TotSum");      
      		res = -1; 
      		goto LTBBUVcRecordCheck;*/
  		end;
  	end;
  end; //Edit***************************Sasha2,17:45 07.10.2014 }
  
  rwcnt = MatRowCnt(TBBUr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(TBBUr,i,TBBUrw);
     switch (TBBUrw.stp) begin
       case 1:
         if (nonblank(TBBUrw.ArtCode)) then begin
           INr.Code = TBBUrw.ArtCode;
           if (ReadFirstMain(INr,1,true)==false) then begin
             RecordCheckError(1233,"",i,"ArtCode");      
             res = -1;
             goto LTBBUVcRecordCheck;
           end;
         end else begin
           if (TBBUrw.Qty!=0) then begin
             if (blank(TBBUrw.TimeClass)) then begin
               RecordCheckError(1233,"",i,"ArtCode");      
               res = -1;
               goto LTBBUVcRecordCheck;
             end;
           end;
        end;
        if (nonblank(TBBUrw.PRStageSign)) then begin
          Userr.Code = TBBUrw.PRStageSign;
          if (ReadFirstMain(Userr,1,true)==false) then begin
            RecordCheckError(20170," " & TBBUrw.PRStageSign, i, "PRStageSign");   
            res = -1; 
            goto LTBBUVcRecordCheck;
          end;
        end;
      case 18:
        for (j=0;j<rwcnt;j=j+1) begin
          MatRowGet(TBBUr,j,TBBU2rw);
          if (TBBUrw.stp == TBBU2rw.stp and TBBUrw.TypeName == TBBU2rw.TypeName and i!=j) then begin
            typelen = len(TBBUrw.TypeName);
            for (k=0;k<typelen;k=k+1) begin
              if (Asc(Mid(TBBUrw.TypeName,k,1)) == 45) then begin
                TBBU2rw.TypeName = left(TBBUrw.TypeName,k) & "(" & indext & ")" & Right(TBBUrw.TypeName,typelen - k);
                indext = indext +1;
                MatRowPut(TBBUr,j,TBBU2rw);
                k = typelen;
              end;
            end;
          end;
        end;      
     end;
  end;
LTBBUVcRecordCheck:;
  TBBUVcRecordCheck = res;
  RETURN;
END;

procedure TBBUVcConvertB1ToB2Date(var record TBBUVc TBBUr)
BEGIN
  row TBBUVc TBBUrw;
  Integer i,rwcnt;
  string 5 curncy;
  val fr,to1,to2,br1,br2,t;

  GetFullCurncyRate(curncy,TBBUr.TransDate,fr,to1,to2,br1,br2);
  rwcnt = MatRowCnt(TBBUr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(TBBUr,i,TBBUrw);
    B1ToB2Val(TBBUrw.Price,br1,br2,t);
    TBBUrw.Price = t;
    B1ToB2Val(TBBUrw.Sum,br1,br2,t);
    TBBUrw.Sum = t;
    B1ToB2Val(TBBUrw.Cost,br1,br2,t);
    TBBUrw.Cost = t;
    B1ToB2Val(TBBUrw.GP,br1,br2,t);
    TBBUrw.GP = t;
    MatRowPut(TBBUr,i,TBBUrw);
  end;
  TBBUSumup(TBBUr);
  RETURN;
END;

procedure TBBUVcConvertB1ToB2(var record TBBUVc TBBUr,string curncy,val fr,var val to1,var val to2,var val br1,var val br2)
BEGIN
  row TBBUVc TBBUrw;
  Integer i,rwcnt;
  val t;

  SwapM4Val(br1,br2);
  SwapM4Val(to1,to2);

  rwcnt = MatRowCnt(TBBUr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(TBBUr,i,TBBUrw);
    B1ToB2Val(TBBUrw.Price,br1,br2,t);
    TBBUrw.Price = t;
    B1ToB2Val(TBBUrw.Sum,br1,br2,t);
    TBBUrw.Sum = t;
    B1ToB2Val(TBBUrw.Cost,br1,br2,t);
    TBBUrw.Cost = t;
    B1ToB2Val(TBBUrw.GP,br1,br2,t);
    TBBUrw.GP = t;
    MatRowPut(TBBUr,i,TBBUrw);
  end;
  RETURN;
END;

global
function LongInt TBBUVcRecordImport(var record TBBUVc TBBUr,record TBBUVc TBBU2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  record ConvMasterBlock cvm;
  record PRVc PRr;
  Boolean gBase1ToBase2,gToDualBase;
  string 5 curncy;
  val fr,to1,to2,br1,br2,t;
  record BaseCurBlock BCb;

  BlockLoad(cvm);
  if (cvm.DualBaseCurrencyFlag!=0) then begin gToDualBase = true; end;
  if (cvm.Base1ToBase2Flag!=0) then begin gBase1ToBase2 = true; end;
  if (gToDualBase) then begin
    fr = TBBUr.FrRate;
    to1 = TBBUr.ToRateB1;
    to2 = TBBUr.ToRateB2;
    br1 = TBBUr.BaseRate1;
    br2 = TBBUr.BaseRate2;
    t = TBBUr.TotSum;
    curncy = TBBUr.CurncyCode;
    ConvertToDualBase(curncy,TBBUr.TransDate,fr,to1,to2,br1,br2,t,true);
    TBBUr.CurncyCode = curncy;
    TBBUr.FrRate = fr;
    TBBUr.ToRateB1 = to1;
    TBBUr.ToRateB2 = to2;
    TBBUr.BaseRate1 = br1;
    TBBUr.BaseRate2 = br2;
    TBBUr.TotSum = t;
  end;
  if (gBase1ToBase2) then begin
    BlockLoad(BCb);
    if (blank(TBBUr.CurncyCode)) then begin
      TBBUr.CurncyCode = BCb.BaseCur2;
    end;
    if (blank(TBBUr.CurncyCode)) then begin
      TBBUVcConvertB1ToB2Date(TBBUr);
    end else begin  
      if (TBBUr.CurncyCode==BCb.BaseCur2) then begin
        to1 = TBBUr.ToRateB1;
        to2 = TBBUr.ToRateB2;
        br1 = TBBUr.BaseRate1;
        br2 = TBBUr.BaseRate2;
        TBBUVcConvertB1ToB2(TBBUr,TBBUr.CurncyCode,TBBUr.FrRate,to1,to2,br1,br2);
        TBBUr.ToRateB1 = to1;
        TBBUr.ToRateB2 = to2;
        TBBUr.BaseRate1 = br1;
        TBBUr.BaseRate2 = br2;
      end;
    end;
  end;
   PRr.Code = TBBUr.PRCode;
   if (ReadFirstMain(PRr,1,true)) then begin
     TBBUr.Members = PRr.Members;
   end;  

  TBBUVcRecordImport = res;
  RETURN;
END;

// Edit Start ---------------------------------------------- Edit Start
	//Wednesday, 20 August 2014 15:29:48
	
global updating procedure CreateProjInvoice(var record TBBUVc TBBUr)
begin
	record PRVc PRr,oldPRr;
	row PRVc PRrw;
	integer i,mtrw;
	record PDVc PDr;
	array string 20 invprc;
	val prc;
	array integer invday;
	integer invcnt;
	record InstallmentVc Installmentr;
	row InstallmentVc Installmentrw;
	integer ii,imtrw,k;
	val budsum;
	integer sumday,prevday;
	record IVVc IVr;
	Integer pdays,datedif; //Edit***************************Sasha2,11:06 12.12.2014
	record CUVc CUr; //Edit***************************Sasha2,11:08 12.12.2014
	string 20 country; //Edit***************************Sasha2,11:14 12.12.2014
	boolean payday, testf; //Edit by Victor 23.12.14
	
	sumday = 0;
	//budsum = TBBUr.SumTime + TBBUr.SumMaterial + TBBUr.SumStocked;
	budsum = TBBUr.TotSum;
	PRr.Code = TBBUr.PRCode;
	if(readfirstmain(PRr,1,true) and PRr.StopInvoicing==0)then begin // Edit ************************** Friday, 12 September 2014 15:49:53
		mtrw = matrowcnt(PRr);
		PDr.Code = PRr.PayDeal;
		invcnt = 1;
		invprc[0] = "100%";
		invday[0] = 0;
		mtrw = matrowcnt(PRr);
		
		prc = 100;
		For(i=0;i<mtrw;i=i+1) begin
	  	matrowget(PRr,i,PRrw);
	  	if(nonblank(PRrw.ValStr))then begin
	  		prc = prc - stringtoval(PRrw.ValStr,M4Val);
	  	end;
		end; 
		invprc[0] = prc & "%";
		
		if(readfirstmain(PDr,1,true))then begin
			if (PDr.DayType==1) then begin //Edit***************************Sasha2,13:09 08.12.2014 {
			  	pdays = PDr.pdays;
			  	CUr.Code = PRr.CustCode;
				if(readfirstmain(CUr,1,true))then begin
					country = CUr.CountryCode;
				end else begin
					country = "UA";
				end;
			  	datedif = CountWorkingDays(PRr.EndDate,AddDay(PRr.EndDate,pdays),PRr.CustCode,country);
			  
			  payday = true;
  
				switch(getDateid(AddDay(PRr.EndDate,pdays))) begin
					case 1: if(CUr.Monday!=0) then begin payday = false;end;
					case 2: if(CUr.Tuesday!=0) then begin  payday = false;end;
					case 3: if(CUr.Wednesday!=0) then begin payday = false;end;
					case 4: if(CUr.Thursday!=0) then begin payday = false;end;
					case 5: if(CUr.Friday!=0) then begin payday = false;end;
					case 6: if(CUr.Saturday!=0) then begin payday = false;end;
					case 7: if(CUr.Sunday!=0) then begin payday = false;end;
				end;
		
				if(datedif>0 and (datedif<pdays or !payday))then begin
						testf = (datedif<pdays or !payday);
					if(!testf)then begin 
						testf = !payday;
					end;
	
					while(testf) begin
						i=i+1;
						if(PDr.DayType==1)then begin
						datedif = CountWorkingDays(AddDay(PRr.EndDate,1),AddDay(PRr.EndDate,pdays + i),PRr.CustCode,country);
						end else begin
							datedif = datediff(AddDay(PRr.EndDate,pdays + i), AddDay(PRr.EndDate,1));
						end;
						//curdate = AddDay(IVp.InvDate,pdays);
						payday = true;
						switch(getDateid(AddDay(PRr.EndDate,pdays + i-1))) begin
							case 1: if(CUr.Monday!=0) then begin payday = false;end;
							case 2: if(CUr.Tuesday!=0) then begin  payday = false;end;
							case 3: if(CUr.Wednesday!=0) then begin payday = false;end;
							case 4: if(CUr.Thursday!=0) then begin payday = false;end;
							case 5: if(CUr.Friday!=0) then begin payday = false;end;
							case 6: if(CUr.Saturday!=0) then begin payday = false;end;
							case 7: if(CUr.Sunday!=0) then begin payday = false;end;
						end;
						testf = datedif<pdays;
						if(!testf)then begin 
							testf = !payday;
						end;
					end;
					pdays = pdays + i - 1;
				end;
			  invday[0] = pdays;
			end else begin //Edit***************************Sasha2,13:09 08.12.2014 }
				invday[0] = PDr.pdays;
			end;
			
			/*if(datedif>0 and datedif<pdays)then begin
					while(datedif<pdays) begin
						i=i+1;
						datedif = CountWorkingDays(AddDay(PRr.EndDate,1),AddDay(PRr.EndDate,pdays + i),PRr.CustCode,country);
					end;
					pdays = pdays + i - 1;
				end;*/
			
			if(nonblank(PDr.Installment))then begin
				Installmentr.Code = PDr.Installment;
				if(readfirstmain(Installmentr,1,true))then begin
					imtrw = matrowcnt(Installmentr);
					if(imtrw>0)then begin
						invcnt = 0;
						For(ii=0;ii<imtrw;ii=ii+1) begin
	  					matrowget(Installmentr,ii,Installmentrw);
	  					invprc[invcnt] = Installmentrw.Prc;
	  					invday[invcnt] = Installmentrw.Days;
	  					sumday = sumday + Installmentrw.Days;
	  					invcnt = invcnt + 1;
						end; 
					end;
				end;
			end;
		end;
		k = mtrw;
		prevday = 0;
		//RecordCopy(PRr,oldPRr); 
		For(i=0;i<invcnt;i=i+1) begin
	  	clearrow(PRr,PRrw,1);
	  	PRrw.RowType = 0;
	  	PRrw.Comment = TBBUr.Comment & " " & invprc[i];
	  	PRrw.ValStr = invprc[i];
	  	if(nonblank(PRr.EndDate))then begin
	  		if(nonblank(PDr.Installment))then begin	//Edit by Victor 23.12.14
  				PRrw.PlanDate = addday(PRr.EndDate,-sumday + invday[i] + prevday); //Edit***************************Sasha2,14:29 26.12.2014
  			end else begin
  				PRrw.PlanDate = PRr.EndDate;	//Edit by Victor 23.12.14
  			end;
			  prevday = prevday + invday[i];
	  	end else begin
	  		PRrw.PlanDate = addday(PRr.LaunchingDate,invday[invcnt]); //Edit***************************Sasha2,14:29 26.12.2014
	  	end;
	  	matrowinsert(PRr,k,PRrw);
	  	k=k+1;
		end;
		RecordStore(PRr,true);
		SinglePRDownPayInvoice(PRr);
		
	end;
	
return;
end;

	// Edit End ---------------------------------------------- Edit End


global
updating function LongInt TBBUVcRecordSave(var record TBBUVc TBBUr,record TBBUVc TBBU2r,LongInt stat,LongInt long4)
begin
  LongInt res;
	
	CreateTBBUAct(TBBUr);
  SetTBBUAcceptanceFlag(TBBUr,TBBU2r,stat);
  TBBUVcRecordSave = res; 
  return;
end;

global
updating function LongInt TBBUVcRecordSaveAfter(var record TBBUVc TBBUr,record TBBUVc TBBU2r,LongInt stat,LongInt long4)
begin
  LongInt res;
	
	//if(TBBUr.OKFlag==1)then begin
		//PasteTBBUInVIFunc(TBBUr); //Edit***************************Sasha2,14:40 12.12.2014
		//CreateProjInvoice(TBBUr); // Edit ************************** Wednesday, 20 August 2014 11:45:45
		//UpdatePRBUOkFlag(TBBUr);
	//end;
	if (TBBUr.ApproveFlag==1) then begin
		UpdatePRBUApproveFlag(TBBUr); //Edit***************************Sasha2,15:12 16.09.2014
		PasteTBBUInVIFunc(TBBUr); //Edit by Victor 20.07.15	
		CreateProjInvoice(TBBUr); // Edit by Victor 20.07.15		
	end;
	
	UpdateDaughterTBBUApproveFlags(TBBUr); //Edit***************************Sasha2,14:24 29.07.2015
	UpdateDaughterTBBUAcceptanceStatus(TBBUr); //Edit***************************Sasha2,14:24 29.07.2015
	UpdatePRBUOkFlag(TBBUr);	//Edit by Victor 20.07.15	
	
  SetTBBUAcceptanceFlag(TBBUr,TBBU2r,stat);
  TBBUVcRecordSaveAfter = res; 
  return;
end;

global
updating function LongInt TBBUVcRecordUpdate(var record TBBUVc TBBUr,record TBBUVc TBBU2r,LongInt stat,LongInt long4)
begin
  LongInt res;
	
  SetTBBUAcceptanceFlag(TBBUr,TBBU2r,stat);
  TBBUVcRecordUpdate = res; 
  return;
end;

global
updating function LongInt TBBUVcRecordUpdateAfter(var record TBBUVc TBBUr,record TBBUVc TBBU2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  boolean f;
  val bc1v;
	
	if(TBBUr.ApproveFlag==1 and TBBU2r.ApproveFlag==0)then begin	//Edit by Victor 20.07.15	
		PasteTBBUInVIFunc(TBBUr); //Edit***************************Sasha2,14:40 12.12.2014
		CreateProjInvoice(TBBUr); // Edit ************************** Wednesday, 20 August 2014 11:45:45
	end;
	//if(TBBUr.OKFlag!=TBBU2r.OKFlag)then begin
		//UpdatePRBUOkFlag(TBBUr);// Edit ************************** Friday, 12 September 2014 16:25:19
	//end;
	if(TBBUr.ApproveFlag!=TBBU2r.ApproveFlag)then begin
		UpdatePRBUApproveFlag(TBBUr); //Edit***************************Sasha2,15:12 16.09.2014
		UpdateDaughterTBBUApproveFlags(TBBUr); //Edit***************************Sasha2,14:26 29.07.2015
	end;
	
	if(TBBUr.AcceptanceStatus!=TBBU2r.AcceptanceStatus)then begin
	 UpdatePRBUOkFlag(TBBUr); //Edit***************************Sasha2,13:20 22.07.2015
	 UpdateDaughterTBBUAcceptanceStatus(TBBUr); //Edit***************************Sasha2,14:26 29.07.2015
	end;
	
  switch (TBBUr.AcceptanceStatus) begin
    case kAcceptanceStatePending:
      if (TBBU2r.AcceptanceStatus!=kAcceptanceStatePending) then begin
        bc1v = MulRateToBase1(TBBUr.CurncyCode,TBBUr.TotSum,TBBUr.FrRate,TBBUr.ToRateB1,TBBUr.ToRateB2,TBBUr.BaseRate1,TBBUr.BaseRate2,DefaultCurRoundOff);
        FindAcptRulesAndCreateAcceptanceAlert2(kAcceptanceTBBU,TBBU2r.AcceptanceStatus,"TBBUVc",TBBUr.PRCode,TBBUr.SalesMan,bc1v,TBBUr.TotSum,TBBUr.CurncyCode,TBBUr.CustCode,TBBUr.AcceptanceBy,TBBUr.AcceptanceFYI);
      end;
    case kAcceptanceStateNotRequested:
      if (TBBU2r.AcceptanceStatus==kAcceptanceStatePending) then begin
        CancelApprovalRequestActivities(kAcceptanceTBBU,"TBBUVc",TBBUr.PRCode,"");
      end;
  end;
  if (TBBUr.ApproveFlag==1 and TBBU2r.ApproveFlag==0) then begin
		f = CreateCustomTask("LAW,LARISA,SALIVON,NDREW,GLADKIY","TBBUVc",TBBUr.PRCode,"CLAPR " & TBBUr.PRCode & USetStr(31036),"CLAPR");
  end;

  TBBUVcRecordUpdateAfter = res; 
  return;
end;

global
function LongInt TBBUVcRecordRemoveTest(var record TBBUVc TBBUr,record TBBUVc TBBU2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  record DBLockBlock DBLockRec;
  record PRVc PRr;

  res = 1;
  BlockLoad(DBLockRec);
  if (TBBUr.TransDate<DBLockRec.DeleteBeforeDate) then begin
    goto LTBBUVcRecordRemoveTest;
  end;
  
  PRr.Code = TBBUr.PRCode;
  if (ReadFirstMain(PRr,1,true)) then begin		//Edit----------------------Dima  20.11.2015
		if (nonblank(PRr.MotherCode)) then begin
			if (CheckBudgetForEditing(TBBUr)==false) then begin
    		res = 0;
    		MessageBox(31040,"");    		
    		goto LTBBUVcRecordRemoveTest;
			end;
		end;
	end;  
  
  if (AcceptanceActivityExists(kAcceptanceTBBU,"TBBUVc",TBBUr.PRCode,TBBUr.CustCode)) then begin
    if (long3>0  ) then begin MessageBox(22408,""); end;		//Edit----------------------Dima  19.11.2015
    res = 0;
    goto LTBBUVcRecordRemoveTest;
  end;  
  
  
LTBBUVcRecordRemoveTest:;
  TBBUVcRecordRemoveTest = res; 
  return;
end;
