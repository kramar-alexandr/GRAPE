external procedure TBBUDchrsum(var record TBBUVc,Integer,Boolean,Integer); // Edit ************************** Thursday, 25 June 2015 10:39:48
external procedure TBBUSumup(var record TBBUVc); // Edit ************************** Thursday, 25 June 2015 10:39:49
external function boolean AcceptanceTaskCustomer(var record ActVc); //Edit***************************Sasha2,12:35 21.07.2015
external updating procedure AcceptanceTaskRecordLink(record ActVc); //Edit***************************Sasha2,12:36 21.07.2015
external function Boolean GetPD(var record PDVc); //Edit***************************Sasha2,18:06 23.07.2015
external function LongInt CountWorkingDays(Date,Date,string,string); //Edit***************************Sasha2,18:18 23.07.2015
external function LongInt DateDiff(Date,Date); //Edit***************************Sasha2,18:24 23.07.2015
external procedure ExtractObj(string,var Integer,var string);//Edit---------------Vitalii 11:50 27.07.2015

global //Edit***************************Sasha2,18:03 23.07.2015 {
updating function LongInt GetDaysAmountFromPayDeal(date FromDate,string PayD,string customer)
begin
  LongInt pdays;
  record PDVc PDr;
  record CUVc Cur;
  string 100 country;
  integer i,datedif;
  boolean payday, testf;
  date blankd;
    
    pdays = -1;
    if (blank(PayD) or FromDate==blankd) then begin
      goto LGetDaysAmountFromPayDeal;
    end;
    PDr.Code = PayD;
    if (GetPD(PDr)) then begin end;
    pdays = PDr.pdays;
    
    if (PDr.DayType==1) then begin 
    	CUr.Code = customer;	
    	if(readfirstmain(CUr,1,true))then begin
    		country = CUr.CountryCode;
    	end else begin
    		country = "UA";
    	end;
    	datedif = CountWorkingDays(FromDate,AddDay(FromDate,pdays),customer,country);
  	
    	payday = true;
      
    	switch(getDateid(AddDay(FromDate,pdays))) begin
    		case 1: if(CUr.Monday!=0) then begin payday = false;end;
    		case 2: if(CUr.Tuesday!=0) then begin  payday = false;end;
    		case 3: if(CUr.Wednesday!=0) then begin payday = false;end;
    		case 4: if(CUr.Thursday!=0) then begin payday = false;end;
    		case 5: if(CUr.Friday!=0) then begin payday = false;end;
    		case 6: if(CUr.Saturday!=0) then begin payday = false;end;
    		case 7: if(CUr.Sunday!=0) then begin payday = false;end;
    	end;
  	
    	if(datedif>0 and (datedif<pdays or !payday)) then begin
    		testf = (datedif<pdays or !payday);
    		if(!testf)then begin 
    			testf = !payday;
    		end;
    	
    		while (testf) begin
    			i=i+1;
    			if(PDr.DayType==1)then begin
    			datedif = CountWorkingDays(AddDay(FromDate,1),AddDay(FromDate,pdays + i),customer,country);
    			end else begin
    				datedif = datediff(AddDay(FromDate,pdays + i), AddDay(FromDate,1));
    			end;
    			payday = true;
    			switch(getDateid(AddDay(FromDate,pdays + i-1))) begin
    				case 1: if(CUr.Monday!=0) then begin payday = false;end;
    				case 2: if(CUr.Tuesday!=0) then begin  payday = false;end;
    				case 3: if(CUr.Wednesday!=0) then begin payday = false;end;
    				case 4: if(CUr.Thursday!=0) then begin payday = false;end;
    				case 5: if(CUr.Friday!=0) then begin payday = false;end;
    				case 6: if(CUr.Saturday!=0) then begin payday = false;end;
    				case 7: if(CUr.Sunday!=0) then begin payday = false;end;
    			end;
    			testf = datedif<pdays;
    			if(!testf)then begin 
    				testf = !payday;
    			end;
    		end;
    		pdays = pdays + i - 1;
    	end;
    end;
  
    if (pdays<0) then begin pdays = 0; end;
  
LGetDaysAmountFromPayDeal:; 
 
  GetDaysAmountFromPayDeal = pdays;
  return;
end; //Edit***************************Sasha2,18:04 23.07.2015 }

//Edit***************************Sasha2,10:55 24.07.2015 {
updating procedure TaskRecordLink(record ActVc Actr)
begin
  record POVc POr;
  record IVVc IVr;
  record TBBUVc TBBUr;
  record PRVc PRr;
  record VIVc VIr;
  record ExpVc Expr;
  record IntORVc IntORr;
  record QTVc QTr;
  record ORVc ORr;
  record PUVc PUr;
  record SDVc SDr;
  record SHVc SHr;
  record OPVc OPr;
  record IPVc IPr;
  record LeaveApplicationVc LeaveApplicationr;
  record LeaveTransferVc LeaveTransferr;
  record HMTravelLogVc HMTravelLogr;
  
  switch (Actr.FromFileName) begin
    case "IVVc": 
      IVr.SerNr = Actr.FromSerNr;
      if (ReadFirstMain(IVr,1,true)) then begin
        CreateRecordLink(Actr,CurrentCompany,IVr,CurrentCompany);
        CreateRecordLink(IVr,CurrentCompany,Actr,CurrentCompany);
      end;
    case "OPVc":
      OPr.SerNr = Actr.FromSerNr;
      if (ReadFirstMain(OPr,1,true)) then begin
        CreateRecordLink(Actr,CurrentCompany,OPr,CurrentCompany);
        CreateRecordLink(OPr,CurrentCompany,Actr,CurrentCompany);
      end;
    case "IPVc":
      IPr.SerNr = Actr.FromSerNr;
      if (ReadFirstMain(IPr,1,true)) then begin
        CreateRecordLink(Actr,CurrentCompany,IPr,CurrentCompany);
        CreateRecordLink(IPr,CurrentCompany,Actr,CurrentCompany);
      end;
    case "ORVc": 
      ORr.SerNr = Actr.FromSerNr;
      if (ReadFirstMain(ORr,1,true)) then begin
        CreateRecordLink(Actr,CurrentCompany,ORr,CurrentCompany);
        CreateRecordLink(ORr,CurrentCompany,Actr,CurrentCompany);
      end;
    case "POVc": 
      POr.SerNr = Actr.FromSerNr;
      if (ReadFirstMain(POr,1,true)) then begin
        CreateRecordLink(Actr,CurrentCompany,POr,CurrentCompany);
        CreateRecordLink(POr,CurrentCompany,Actr,CurrentCompany);
      end;
    case "PUVc":
      PUr.SerNr = Actr.FromSerNr;
      if (ReadFirstMain(PUr,1,true)) then begin
        CreateRecordLink(Actr,CurrentCompany,PUr,CurrentCompany);
        CreateRecordLink(PUr,CurrentCompany,Actr,CurrentCompany);
      end;
    case "SDVc":
      SDr.SerNr = Actr.FromSerNr;
      if (ReadFirstMain(SDr,1,true)) then begin
        CreateRecordLink(Actr,CurrentCompany,SDr,CurrentCompany);
        CreateRecordLink(SDr,CurrentCompany,Actr,CurrentCompany);
      end;
    case "SHVc":
      SHr.SerNr = Actr.FromSerNr;
      if (ReadFirstMain(SHr,1,true)) then begin
        CreateRecordLink(Actr,CurrentCompany,SHr,CurrentCompany);
        CreateRecordLink(SHr,CurrentCompany,Actr,CurrentCompany);
      end;
    case "TBBUVc": 
      TBBUr.PRCode = Actr.FromSerNr;
      if (ReadFirstMain(TBBUr,1,true)) then begin
        CreateRecordLink(Actr,CurrentCompany,TBBUr,CurrentCompany);
        CreateRecordLink(TBBUr,CurrentCompany,Actr,CurrentCompany);
      end;
    case "PRVc": 
      PRr.Code = Actr.FromSerNr;
      if (ReadFirstMain(PRr,1,true)) then begin
        CreateRecordLink(Actr,CurrentCompany,PRr,CurrentCompany);
        CreateRecordLink(PRr,CurrentCompany,Actr,CurrentCompany);
      end;
    case "VIVc": 
      VIr.SerNr = Actr.FromSerNr;
      if (ReadFirstMain(VIr,1,true)) then begin
        CreateRecordLink(Actr,CurrentCompany,VIr,CurrentCompany);
        CreateRecordLink(VIr,CurrentCompany,Actr,CurrentCompany);
      end;
  end;
  return;
end; //Edit***************************Sasha2,10:55 24.07.2015 }

procedure ActVcForMail(record ActVc Actr) //Edit---------------Vitalii 10:20 27.07.2015
begin
	record UserVc Userr;
	row ActVc Actrw;
	integer rwcnt,i;
	string 20 fouldername;
	string 255 users;
	string 10 user;
	string 5 nl;
	area tempArea;
	integer pos;
	boolean emailf, firstf;
	
	emailf = false;
	firstf = true;
	fouldername = "/secure/doc/hansa/forMail";
	if !DirExists(fouldername) then begin
		CreateFolder(fouldername);
	end;
	nl = Chr(10) & Chr(13);
	users = Actr.MainPersons;
	pos = 0;
	ExtractObj(users,pos,user);
	while (nonblank(user)) begin
		Userr.Code = user;
		if (ReadFirstMain(Userr,1,true)) then begin
			if nonblank(Userr.emailAddr) then begin
				if firstf then begin
					firstf = false;
				end else begin
					AddTextToArea(",",tempArea);
				end;
				emailf = true;
				AddTextToArea(Userr.emailAddr,tempArea);
			end;
		end;
		ExtractObj(users,pos,user);
	end;
	WriteAreaToFile(tempArea,fouldername & "/U" & Actr.SerNr,0);
	SetAreaZeroSize(tempArea);
	AddTextToArea(Chr(34) & Actr.Comment & Chr(34),tempArea);
	WriteAreaToFile(tempArea,fouldername & "/S" & Actr.SerNr,0);
	SetAreaZeroSize(tempArea);
	AddTextToArea(Actr.Comment,tempArea);
	rwcnt = MatRowCnt(Actr);
	for (i=0;i<rwcnt;i=i+1) begin
		AddTextToArea(nl & Actrw.Text,tempArea);
		MatRowGet(Actr,i,Actrw);
	end;
	WriteAreaToFile(tempArea,fouldername & "/B" & Actr.SerNr,0);
	logtext(0,"Create mail " & Actr.SerNr);// Edit ************************** Tuesday, 1 September 2015 17:05:29
	if emailf then begin
		RunProgram("/secure/doc/hansa/sendmail.sh",Actr.SerNr);
	end;
	return;
end;

global //Edit***************************Sasha2,10:43 21.07.2015 {
updating function Boolean CreateCustomTask(string persons,string fromfilename,string fromsernr,string actcomment,string acttype)
begin
  Boolean res;
  record ActVc Actr;
  record ActTypeVc ActTyper;
  string 255 mailboxnr,mailboxname;
  Integer pos;
  Boolean storef;
  record IVVc IVr;
  record VIVc VIr;
  Integer i,rwcnt;
  string 255 tstr;
  transaction string 255 gAlarmVcSender;
  transaction string 255 gAlarmVcStdTxt;
  
  RecordNew(Actr);
  Actr.AlarmType = kAlarmTypeNone;
  Actr.AlarmWhen = 0;
  Actr.AlarmUnits = 0;
  if (NonBlank(persons)) then begin
    Actr.MainPersons = persons;
  end;
  Actr.TodoFlag = kTodoFlagTodo;
  Actr.CalTimeFlag = kCalTimeFlagNoshow;
  Actr.SymbNr = 3;
  Actr.ActType = acttype;
  Actr.ActTypeComment = "";
  Actr.Comment = actcomment;
  Actr.Comment = Left(Actr.Comment,200);
  Actr.FromFileName = fromfilename;
  Actr.FromSerNr = fromsernr;
  AcceptanceTaskCustomer(Actr);
  switch (Actr.FromFileName) begin
    case "IVVc": 
      IVr.SerNr = Actr.FromSerNr;
      if (ReadFirstMain(IVr,1,true)) then begin
		Actr.PRCode = IVr.PRCode;
      end;
    case "VIVc": 
      VIr.SerNr = Actr.FromSerNr;
      if (ReadFirstMain(VIr,1,true)) then begin
		Actr.PRCode = VIr.PRCode;
      end;
    case "TBBUVc": 
	  Actr.PRCode = fromsernr;
    case "PRVc": 
      Actr.PRCode = fromsernr;
  end;
  Actr.SerNr = NextSerNr("ActVc",Actr.TransDate,-1,false,"");
  if (Actr.SerNr>0) then begin
    if (RecordStore(Actr,false)) then begin
      TaskRecordLink(Actr);
	  ActVcForMail(Actr);
      res = true;
    end;
  end;
LCreateCustomTask:;  
  CreateCustomTask = res;
  return;
end; //Edit***************************Sasha2,10:43 21.07.2015 }


global 
updating procedure PLImportIn()//   Edit-----------------------Dima    20.11.2014  
begin
  record PLVc PLr;
  record PLVc oldPLr;
  record PLDefVc PLDefr;
  record INVc INr;
  string 50 plCode, artCode, price;
  real pr;


	while (TestEOF()==false) begin
		plCode = ImportField;
		artCode = ImportField;
		price = ImportField;
		pr=StringToVal(price,M423Val);
		if (nonblank(plCode) and nonblank(artCode) and (pr > 0) ) then begin
		PLr.PLCode = plCode;
		PLr.ArtCode = artCode;	
			if (ReadFirstMain(PLr,2,true)) then begin		
				RecordCopy(oldPLr,PLr);
				PLr.ExVatPrice = StringToVal(price,M423Val);
				RecordUpdate(oldPLr,PLr,true);
			end else begin
				PLDefr.Code = plCode;
				INr.Code = artCode;
				if (ReadFirstMain(PLDefr,1,true)) then begin
				 	if (ReadFirstMain(INr,1,true))	then begin
						RecordNew(PLr);
						PLr.PLCode = plCode;
						PLr.ArtCode = artCode;
						PLr.ExVatPrice = StringToVal(price,M423Val);
						RecordInsert(PLr,true);
					end;
				end;
			end;	
		end;	
			if (NextImportLine(true)) then begin end;
		
	end;

return;
end;

global 
updating procedure ChangeRebateStpMn()//   Edit-----------------------Dima    20.11.2014  
begin
  record TBBUVc TBBUr;
  row TBBUVc TBBUrw;
  Integer rwcnt,i;
  
  TBBUr.PRCode = "";
  while (LoopMain(TBBUr,1,true)) begin
    rwcnt = MatRowCnt(TBBUr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(TBBUr,i,TBBUrw);
      if (TBBUrw.stp==23) then begin
        TBBUrw.stp = 25;
        MatRowPut(TBBUr,i,TBBUrw);
      end;
    end;
    RECORDSTORE(TBBUr,true);
  end;

return;
end;



Global Updating Procedure RecalcTBBUMn(record RcVc RepSpec)
begin
	record TBBUVc TBBUr;
	row TBBUVc TBBUrw;
	integer i,mtrw;
	record GeneralOptionBlock GOb;
	
	BlockLoad(GOb);
	
	while(loopmain(TBBUr,1,true))begin
		mtrw = matrowcnt(TBBUr);
		For(i=0;i<mtrw;i=i+1) begin
			matrowget(TBBUr,i,TBBUrw);	  
			if(TBBUrw.stp==1)then begin
				if(TBBUrw.Cost!=0)then begin
					TBBUrw.SumCost = TBBUrw.Cost * TBBUrw.Qty;
				end;
				MatRowPut(TBBUr,i,TBBUrw); //Edit***************************Sasha2,10:21 13.10.2014 }
        TBBUDchrsum(TBBUr,i,false,GOb.UseDiscount);
			end;
		end; 
		TBBUSumup(TBBUr);
		recordstore(TBBUr,true);
	end;
	
	
return;
end;


global updating procedure OKAllTBBUMn(record RcVc RepSpec)
begin
	record TBBUVc TBBUr, oldTBBUr;
	row TBBUVc TBBUrw;
	integer i,mtrw;
	
	while(loopmain(oldTBBUr,1,true))begin
		if(oldTBBUr.OKFlag == 0) then begin
			recordCopy(TBBUr, oldTBBUr);		
			TBBUr.OKFlag = 1;
			RecordUpdate(oldTBBUr,TBBUr,true);
		end;
	end;	   
	
return;
end;


global updating procedure UpdateObjectsInPaymentDocumentsMn()		//Edit----------------------Dima  12.10.2015
begin
	record PRVc PRr, oldPRr;
	record IVVc IVr, oldIVr;
	record VIVc VIr, oldVIr;
	record IPVc IPr, oldIPr;
	record OPVc OPr, oldOPr;
	record CUVc CUr, oldCUr;
	
	While(LoopMain(PRr,1,true)) begin
		RecordCopy(oldPRr,PRr);
  	RecordUpdate(oldPRr,PRr,true);
	end;
	
	While(LoopMain(CUr,1,true)) begin
		RecordCopy(oldCUr,CUr);
  	RecordUpdate(oldCUr,CUr,true);
	end;	
	
	While(LoopMain(IVr,1,true)) begin
		RecordCopy(oldIVr,IVr);
  	RecordUpdate(oldIVr,IVr,true);
	end;
	
	While(LoopMain(VIr,1,true)) begin
		RecordCopy(oldVIr,VIr);
  	RecordUpdate(oldVIr,VIr,true);
	end;
	
	While(LoopMain(IPr,1,true)) begin
		RecordCopy(oldIPr,IPr);
  	RecordUpdate(oldIPr,IPr,true);
	end;
	
	While(LoopMain(OPr,1,true)) begin
		RecordCopy(oldOPr,OPr);
  	RecordUpdate(oldOPr,OPr,true);
	end;				
  
end;


global updating procedure ApproveByCompaniesAllTBBUMn()		//Edit----------------------Dima  15.10.2015
begin
	record TBBUVc TBBUr, oldTBBUr;
	
	while(loopmain(oldTBBUr,1,true)) begin
		if (oldTBBUr.AcceptanceStatus < kAcceptanceStateApproved) then begin
			RecordCopy(TBBUr, oldTBBUr);		
			TBBUr.AcceptanceStatus = kAcceptanceStateApproved;
			RecordUpdate(oldTBBUr,TBBUr,true);
		end;
	end;	   
	
return;
end;

global updating procedure ApproveByClientAllTBBUMn()		//Edit----------------------Dima  15.10.2015
begin
	record TBBUVc TBBUr, oldTBBUr;
	record PRVc PRr;
	
	while(loopmain(TBBUr,1,true)) begin
  	PRr.Code = TBBUr.PRCode;
  	if (ReadFirstMain(PRr,1,true)) then begin
			if (TBBUr.ApproveFlag == 0  and Blank(PRr.MotherCode)) then begin
				RecordCopy(oldTBBUr, TBBUr);		
				TBBUr.ApproveFlag = 1;
				RecordUpdate(oldTBBUr,TBBUr,true);
			end;	
		end;
	end;	   
	
return;
end;


global
function Boolean FindSubString( string Search, string Source )	//Edit----------------------Dima  16.10.2015
begin
	integer i,length,lengthSource,diff;
	string 150 temp,str,inStr;
	boolean res;
	
	res=false;
	length=len(Search);
	lengthSource=len(Source);
	diff=lengthSource-length;

	str=UpperCase(Search);   
	inStr=UpperCase(Source);		
	if (diff<0) then begin
	goto	breakFunction;
	end;
	
	for(i=0;i<=diff;i=i+1) begin
	 temp=mid(inStr,i,length);
	 if(temp==str) then begin
	 	res = true;
	 	goto breakFunction;
	 end;	
	end;

	breakFunction:; // goto
	FindSubString=res;
return;  
end;


global updating procedure FixIncorrecObjectMn()	//Edit----------------------Dima  16.10.2015
begin	
record CUvc CUr;
record ObjVc Objr;
boolean save;

	While(LoopMain(Objr,1,true)) begin
		if (FindSubString(".",Objr.Code)) then begin
			RecordDelete(OBjr);
			StepBack(Objr);
		end;
 	end;
 	
	While(LoopMain(CUr,1,true)) begin
		save = false;
		if (FindSubString(".",CUr.Objects)) then begin
			CUr.Objects = "";
			save = true;
		end;
		if (FindSubString(".",CUr.VEObjects)) then begin
			CUr.VEObjects = "";
			save = true;
		end;
		if (save) then begin
			RecordStore(CUr,true);
		end;
 	end; 	
 	
 	UpdateObjectsInPaymentDocumentsMn;
 	 
end;
