external procedure TBBUSumup(var record TBBUVc);
external procedure TBBUDchrsum(var record TBBUVc,Integer,Boolean,Integer);
external function Boolean VIVc_PasteVECode(var record VIVc,Integer,Boolean,Boolean,var string); //Edit***************************Sasha2,16:14 08.12.2014
external procedure VISumup(record VIVc,var val); //Edit***************************Sasha2,16:25 08.12.2014
external procedure ExtractObj(string,var Integer,var string); //Edit***************************Sasha2,16:27 08.12.2014
external function Boolean SetInSet2(string,string); //Edit***************************Sasha2,16:28 08.12.2014
external procedure GetItemVATCode(string,Integer,var string,Boolean); //Edit***************************Sasha2,17:26 08.12.2014
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode); //Edit***************************Sasha2,17:26 08.12.2014
external procedure VIVc_PastePRCode(var record VIVc,Integer); //Edit***************************Sasha2,17:54 08.12.2014
external procedure VICalcVals(var record VIVc); //Edit***************************Sasha2,18:05 08.12.2014
external procedure RowCalculateTaxMatrix_VIVc(var record VIVc,Integer,row VIVc,Integer);
external procedure VIDDefault(Integer,string,var record VIVc); //Edit***************************Sasha2,17:08 12.12.2014
external procedure VIVc_PastePayDeal(var record VIVc); //Edit***************************Sasha2,10:06 18.12.2014
external procedure VIGetRate(var record VIVc); //Edit***************************Sasha2,10:09 18.12.2014
external procedure UpdateVIPayDate(string,date); //Edit***************************Sasha2,13:57 20.02.2015
external procedure TBBUVc_PasteTypeName_Rebate(record TBBUVc,integer,var row TBBUVc); //Edit***************************Sasha2,18:23 29.04.2015
external procedure RecalcTBBURebate(var record TBBUVc); //Edit***************************Sasha2,9:37 02.06.2015
external procedure ExtractObjWithSeparator(string,string,Boolean,var Integer,var string);	//Edit----------------------Dima  15.10.2015

SetLangMode(LangRussian,"RUS",0);


procedure PutOnVIRow(var record VIVc VIr,row ViVc VIrw,var Integer virownr,row TBBUVc TBBUrwp,record TBBUVc TBBUp,string vevatcode,Integer exportflag)
BEGIN
  string 255 tstr;
  val t;
  Integer oldstyle;
  record TaxMatrixVc TMr;
  
  ClearRow(VIr,VIrw,1);
  VIrw.AccNumber = VIr.BankAcc; //Edit***************************Sasha2,11:40 06.04.2015
  VIrw.Item = TBBUrwp.ArtCode;
  //MatRowPut(VIr,virownr,VIrw);
  //MatRowGet(VIr,virownr,VIrw);
  VIrw.Comment = TBBUrwp.Comment;
  VIrw.Objects = TBBUrwp.Objects;
  VIrw.PRCode = TBBUp.PRCode;
  MatRowPut(VIr,virownr,VIrw);
  VIVc_PastePRCode(VIr,virownr);
  MatRowGet(VIr,virownr,VIrw);
  VIrw.qty = TBBUrwp.Qty;
  VIrw.Sum = TBBUrwp.SumCost;
  //VIrw.VATCode = TBBUrwp.VATCode;
  /*VIrw.VATCode = vevatcode;
  if (blank(VIrw.VATCode)) then begin
    GetItemVATCode(VIrw.Item,exportflag,tstr,false);
    VIrw.VATCode = tstr;
  end;*/
  MatRowPut(VIr,virownr,VIrw); 
  //VIDDefault(virownr,"VATCode",VIr);   
  virownr = virownr + 1;
  RETURN;
END;


global //Edit***************************Sasha2,9:50 14.10.2014 {
updating procedure PasteTBBUInVIFunc(record TBBUVc TBBUp)
BEGIN
  LongInt res;
  record PRVc PRr;
  vector record VIVc vectVIr;
  record CUVc VEr;
  record INVc INr;
  record VIVc VIr;
  row VIVc VIrw;
  record TBBUVc oldTBBUp;
  row TBBUVc TBBUrw;
  integer i,rwcnt,rownr;
  vector Integer porownr;
  string 50 subcontrname;
  string 355 subcontrlist,subcontrlist2,vewarn;
  Integer pos;
  val bal;
  vector LongInt viserns;
  Boolean changedf;
  date vipaydate;
  vector boolean subContractors;
  array string 100 subcontrarray;

  changedf = false;
 // if (ReadFirstMain(TBBUp,0,true)) then begin end;  
  PRr.Code = TBBUp.PRCode;
  if (ReadFirstMain(PRr,1,true)==false) then begin goto LPasteTBBUInVIFunc; end;
  if (PRr.Terminated!=0) then begin goto LPasteTBBUInVIFunc; end;
	if (PRr.StopInvoicing==1)then begin goto LPasteTBBUInVIFunc; end;

  
  RecordCopy(oldTBBUp,TBBUp);
  
  rwcnt = MatRowCnt(TBBUp);
  for (i=0;i<rwcnt;i=i+1) begin
  	MatRowGet(TBBUp,i,TBBUrw);
  	if (NonBlank(TBBUrw.ArtCode) and TBBUrw.stp==1 and NonBlank(TBBUrw.SubContractor) and TBBUrw.Invoiced==-1) then begin
		INr.Code = TBBUrw.ArtCode;
		subcontrname = TBBUrw.SubContractor; 
		if (ReadFirstMain(INr,1,true)) then begin
				if (!subContractors[subcontrname]) then begin
		  	//if (!SetInSet2(subcontrname,subcontrlist)) then begin
		  		RecordNew(VIr);
		  		VIr.VECode = TBBUrw.SubContractor;
		  		if (subcontrname!="nosubcontr") then begin
		  			VIVc_PasteVECode(VIr,0,false,false,vewarn);
		  		end;
		  		VEr.Code = VIr.VECode;
      	  ReadFirstMain(VEr,1,true);
      	  if (NonBlank(VEr.VEPayDeal)) then begin
      	    VIr.PayDeal = VEr.VEPayDeal;
      	  end else begin
      	    VIr.PayDeal = PRr.PayDeal;
      	  end; 
      	  VIVc_PastePayDeal(VIr);
      	  VIr.BankAcc = VEr.AccCost;
      	  VIr.Objects = VEr.VEObjects;
		  		vectVIr[subcontrname] = VIr;
		  		porownr[subcontrname] = 0;
		  	//	if (blank(subcontrlist)) then begin
		  	//		subcontrlist = subcontrname;
		  	//	end else begin
		  	//		subcontrlist = subcontrlist & "," & subcontrname;
		  	//	end;
		  		subcontrarray[subcontrarray.length] = subcontrname;		//Edit----------------------Dima  05.11.2015
					subContractors[subcontrname] = true;									//Edit----------------------Dima  05.11.2015
		  	end;
			VIr = vectVIr[subcontrname];
			rownr = porownr[subcontrname];
	    PutOnVIRow(VIr,VIrw,rownr,TBBUrw,TBBUp,VEr.VEVATCode,VIr.ExportFlag);
	    porownr[subcontrname] = rownr;
	    vectVIr[subcontrname] = VIr;
		end;
	end;
  end;

/*  //Edit----------------------Dima  05.11.2015
  if (blank(subcontrlist)) then begin
  	goto LPasteTBBUInVIFunc;
  end;
*/ 
  
  if (subcontrarray.length == 0) then begin	//Edit----------------------Dima  05.11.2015
  	goto LPasteTBBUInVIFunc;
  end;
 
  for(i=0;i<subcontrarray.length;i=i+1)  begin		
 // while (nonblank(subcontrname)) begin 									//Edit----------------------Dima  16.10.2015
//  	VIr = vectVIr[subcontrname];
		VIr = vectVIr[subcontrarray[i]];
  	if (NonBlankDate(PRr.EndDate)) then begin
  	  VIr.InvDate = PRr.EndDate;
  	  VIr.TransDate = PRr.EndDate;
  	end else begin 
   	  VIr.InvDate = CurrentDate;
  	  VIr.TransDate = CurrentDate; 	
  	end;
	  VIr.PRCode = TBBUp.PRCode;
	  VIr.Comment = TBBUp.Comment;
	  VIr.CurncyCode = TBBUp.CurncyCode;
	  VIGetRate(VIr);
	  VIr.BankAcc = "";
	  if (NonBlankDate(PRr.LaunchingDate)) then begin
	  	VIr.StartJobDate = PRr.LaunchingDate;
	  end else begin
	  	VIr.StartJobDate = PRr.StartDate;
	  end;
	  if (NonBlankDate(PRr.FinishedDate)) then begin
	  	VIr.EndJobDate = PRr.FinishedDate;
	  end else begin
	  	VIr.EndJobDate = PRr.EndDate;
	  end;
	  
	  //if (VIr.SerNr<=0) then begin goto LPasteTBBUInVIFunc; end;  
	  if (MatRowCnt(VIr)>0) then begin
	  	if (VIr.SerNr<=0) then begin
			VIr.SerNr = NextSerNr("VIVc",VIr.TransDate,-1,false,"");
		end;
	    VICalcVals(VIr);
	    VISumup(VIr,bal);
	    VIr.PayVal = -bal;
	    if (RecordStore(VIr,false)) then begin
	      viserns[VIr.VECode] = VIr.SerNr;
	      if (BlankDate(vipaydate)) then begin
	       vipaydate = VIr.DueDate;
	      end;
	      if (VIr.DueDate<vipaydate) then begin
	       vipaydate = VIr.DueDate;
	      end;
	      CreateRecordLink(PRr,CurrentCompany,VIr,CurrentCompany);  
	      CreateRecordLink(VIr,CurrentCompany,PRr,CurrentCompany);
	    end;
	  end;
	
  	//ExtractObj(subcontrlist,pos,subcontrname);
  	//ExtractObjWithSeparator(";",subcontrlist,false,pos,subcontrname);	//Edit----------------------Dima  15.10.2015
  end;

  
  for (i=0;i<rwcnt;i=i+1) begin
  	MatRowGet(TBBUp,i,TBBUrw);
  	if (NonBlank(TBBUrw.ArtCode) and TBBUrw.stp==1 and NonBlank(TBBUrw.SubContractor) and TBBUrw.Invoiced==-1) then begin
  		if (viserns[TBBUrw.SubContractor]>-1) then begin
  			TBBUrw.Invoiced = viserns[TBBUrw.SubContractor];
	      	MatRowPut(TBBUp,i,TBBUrw);
	      	changedf = true;
  		end;
  	end;
  end;
  if (changedf) then begin
  	RECORDUPDATE(oldTBBUp,TBBUp,false);
  	UpdateVIPayDate(PRr.Code,vipaydate); //Edit***************************Sasha2,13:59 20.02.2015
  end;
  
LPasteTBBUInVIFunc:;

  RETURN;
END; //Edit***************************Sasha2,9:50 14.10.2014 }



procedure CheckOrSaveCalculatedBudget(var record TBBUVc TBBUr,var string budgeterrors,record GeneralOptionBlock GenOptRec,record PRClassBlock PRClassRec,var Boolean rebatef,boolean checkorsavef,var vector boolean notcollapsef)
begin
  integer i,rwcnt,rwnum,j,rwcnt2,rwcnt3,k,q;
	record PRVc PRr,PR2r;
	record TBBUVc TBBU2r;
	row TBBUVc TBBU2rw;
	row TBBUVc TBBU3rw;
	row PRVc PRrw;
	row TBBUVc TBBUrw;
	boolean testf,TrHs,testf2;
	val t,s;
  row PRClassBlock PRClassrw;
  string 100 name;
  boolean ident;
  
		rwcnt3 = MatRowCnt(PRClassRec);
		PRr.MotherCode = TBBUr.PRCode;
		TrHs = True;
		while(LoopKey("MotherCode",PRr,1,TrHs)) begin
			logtext(0,PRr.Code & " " & PRr.MotherCode);
			testf = true;
			if (PRr.MotherCode!=TBBUr.PRCode)then begin testf = false; TrHs = false;	end;
			if(testf) then begin
				
				TBBU2r.PRCode = PRr.Code;
				if(readfirstmain(TBBU2r,1,true))then begin
					if (TBBU2r.AcceptanceStatus!=kAcceptanceStateNotRequired and TBBU2r.AcceptanceStatus!=kAcceptanceStateApproved) then begin
						budgeterrors = budgeterrors & "Ü " & TBBU2r.PRCode & ", "; //Edit***************************Sasha2,16:00 21.10.2014
					end;
					if(MatRowCnt(TBBUr)==0)then begin
						rwcnt = MatRowCnt(TBBU2r);
						name = "";
						if(rwcnt>0)then begin
								
							for (q=0;q<rwcnt3;q=q+1) begin
								MatRowGet(PRClassRec,q,PRClassrw);
								if(PRr.PRClass == PRClassrw.Code)then begin
									name = PRClassrw.Comment & "--" & PRClassrw.Comment2;
								end;
							end;
														
							TBBUrw.stp = 18;
							TBBUrw.Spec = TBBU2r.PRName;
							TBBUrw.TypeName = name;
							TBBUrw.IdentQuant = 1;
							TBBUrw.PRCode = TBBU2r.PRCode;	//Edit by Victor 28.01.15
							TBBUrw.PRName = TBBU2r.CustName;	//Edit by Victor 28.01.15
							MatRowPut(TBBUr,rwnum,TBBUrw);
							rwnum = rwnum + 1;
							for (i=0;i<rwcnt;i=i+1) begin
								MatRowGet(TBBU2r,i,TBBU2rw);
								MatRowPut(TBBUr,rwnum,TBBU2rw);	
								TBBUDchrsum(TBBUr,rwnum,true,GenOptRec.UseDiscount);
								if (checkorsavef==false) then begin
								  if (rebatef==false and TBBU2rw.stp>=23 and TBBU2rw.stp<=25) then begin
    	              rebatef = true; //Edit***************************Sasha2,9:40 02.06.2015
  								end;
								end;
								rwnum = rwnum + 1;
							end;
						end;
					end else begin
						rwcnt = MatRowCnt(TBBUr);
						ident = false;
						For(i=0;i<rwcnt;i=i+1) begin
  						matrowget(TBBUr,i,TBBUrw);
  						if(TBBUrw.stp==18 and TBBUrw.Spec==TBBU2r.PRName)then begin 
  							ident = true; 
  							rwcnt2 = MatRowCnt(TBBU2r);
  							PR2r.Code = TBBUrw.PRCode; 
  							ReadFirstMain(PR2r,1,true);
  							testf2 = true;
  							if (PRr.PRClass!=PR2r.PRClass) then begin testf2 = false; end;
  							if (PRr.PRClass==PR2r.PRClass and notcollapsef[PR2r.PRClass]==true) then begin testf2 = false; end;
  							if (testf2) then begin
  							  if(rwcnt2<=(rwcnt-i-1))then begin 
    								For(j=0;j<rwcnt2;j=j+1) begin
    									matrowget(TBBU2r,j,TBBU2rw);
    									matrowget(TBBUr,j+i+1,TBBU3rw);
    									if(TBBU2rw.stp!=TBBU3rw.stp or TBBU2rw.ArtCode!=TBBU3rw.ArtCode or TBBU2rw.Price!=TBBU3rw.Price or TBBU2rw.Cost!=TBBU3rw.Cost or TBBU2rw.TypeName!=TBBU3rw.TypeName) then begin
    										ident = false;
    										if (checkorsavef) then begin
    										  notcollapsef[PR2r.PRClass] = true;
    										  //goto LNoMatch;
    										end;
    									end;
  									end; 
    							end else begin
    								ident = false;
    								if (checkorsavef) then begin
  									  notcollapsef[PR2r.PRClass] = true;
  									  //goto LNoMatch;
  									end;
    							end;
  							end else begin
  							  ident = false;
  							end;
  							
  							if(ident)then begin
  								
  								TBBUrw.IdentQuant = TBBUrw.IdentQuant + 1; 	
  								matrowput(TBBUr,i,TBBUrw);						
  								For(j=0;j<rwcnt2;j=j+1) begin
  									matrowget(TBBU2r,j,TBBU2rw);
  									matrowget(TBBUr,j+i+1,TBBU3rw);	 
  									TBBU3rw.Qty = TBBU3rw.Qty + TBBU2rw.Qty;
  									//if nonblank(TBBU2r.ClientCurncyCode) then begin
  										TBBU3rw.ClientSum = TBBU3rw.ClientSum + TBBU2rw.ClientSum;
  										TBBU3rw.ClientPrice = TBBU2rw.ClientSum;
  										TBBU3rw.SumCost = TBBU3rw.SumCost + TBBU2rw.SumCost;
  									//end;
  									matrowput(TBBUr,j+i+1,TBBU3rw);
  									TBBUDchrsum(TBBUr,j+i+1,true,GenOptRec.UseDiscount);	
									end; 
									goto Ldone;
  							end;
  						end;
						end; 
						if(!ident)then begin
							rwcnt2 = MatRowCnt(TBBU2r);
							if(rwcnt2>0)then begin
								rwnum = rwcnt;
								clearrow(TBBUr,TBBU3rw,18);
								name = "";
								for (q=0;q<rwcnt3;q=q+1) begin
									MatRowGet(PRClassRec,q,PRClassrw);
									if(PRr.PRClass == PRClassrw.Code)then begin
										name = PRClassrw.Comment & "--" & PRClassrw.Comment2;
									end;
								end;
								TBBU3rw.stp = 18;
								TBBU3rw.Spec = TBBU2r.PRName;
								TBBU3rw.TypeName = name;
								TBBU3rw.IdentQuant = 1;
								TBBU3rw.PRCode = TBBU2r.PRCode;	//Edit by Victor 28.01.15
								TBBU3rw.PRName = TBBU2r.CustName;	//Edit by Victor 28.01.15
								matrowput(TBBUr,rwnum,TBBU3rw);
								rwnum = rwnum + 1;
								For(i=0;i<rwcnt2;i=i+1) begin
  								matrowget(TBBU2r,i,TBBU2rw);
  								MatRowPut(TBBUr,rwnum,TBBU2rw);	
  								TBBUDchrsum(TBBUr,rwnum,true,GenOptRec.UseDiscount);
  								if (checkorsavef==false) then begin
								    if (rebatef==false and TBBU2rw.stp>=23 and TBBU2rw.stp<=25) then begin
      	              rebatef = true; //Edit***************************Sasha2,9:40 02.06.2015
  									end;
								  end;
  								rwnum = rwnum + 1;
								end; 
							end;
						end else begin
						  /*if (checkorsavef) then begin
							  collapsef = false;
							  goto LNoMatch;
							end;*/
						end;
					end;
				end;
			end;
Ldone:;
		end; RESETLOOP(PRr);
		
LNoMatch:;
		
  return;
end;


global 
procedure CalculateBudget(var record TBBUVc TBBUMainr,var string budgeterrors)
begin
  record GeneralOptionBlock GenOptRec;
	record PRClassBlock PRClassRec;
	record TBBUVc TBBUTestr;
  boolean rebatef;
  vector boolean notcollapsef; //Edit***************************Sasha2,9:38 02.06.2015
	
	BlockLoad(GenOptRec);
	BlockLoad(PRClassRec);
	
  if(TBBUMainr.ApproveFlag>0)then begin	//Edit by Victor 20.07.15
  	logtext(0,"òâåðæäåíî êëèåíòîì!");
  end else begin
		if(MatRowCnt(TBBUMainr)>0)then begin
			logtext(0, "þäæåò íå ïóñòîé!");
		end else begin	
		  rebatef = false; //Edit***************************Sasha2,9:40 02.06.2015	
		  TBBUTestr.PRCode = TBBUMainr.PRCode;
		  CheckOrSaveCalculatedBudget(TBBUTestr,budgeterrors,GenOptRec,PRClassRec,rebatef,true,notcollapsef);
	    CheckOrSaveCalculatedBudget(TBBUMainr,budgeterrors,GenOptRec,PRClassRec,rebatef,false,notcollapsef);
	    if (rebatef) then begin //Edit***************************Sasha2,9:41 02.06.2015 {
			  RecalcTBBURebate(TBBUMainr);
			end; //Edit***************************Sasha2,9:41 02.06.2015 }
			TBBUSumup(TBBUMainr);
		end;
	end;
	logtext(0,matrowcnt(TBBUMainr));
	return;
end;

global 
updating procedure BTRSChangeRelatedActVc(record TBBUVc TBBUr)
begin
	record ActVc Actr;
	record AcceptanceRulesVc ARr;
	boolean testf;

	ARr.Register = kAcceptanceTBBU;
	if (ReadFirstMain(ARr,1,true)) then begin
		resetloop(Actr);
		Actr.FromFileName = "TBBUVc";
		Actr.FromSerNr = TBBUr.PRCode;
		while (LoopKey("FromFileName",Actr,2,true)) begin
			testf = true;
			if ((Actr.FromFileName<>"TBBUVc") and (Actr.OKFlag<>0) and (Actr.ActType<>ARr.AcceptanceActType) and (Actr.FromSerNr<>TBBUr.PRCode)) then begin
				testf = false;
			end;
			if (testf) then begin
				Actr.OKFlag = 1;
				Actr.ActResult = ARr.CancelledActType;
				RECORDSTORE(Actr,true);
			end;
		end;
	end;
	return;
end;